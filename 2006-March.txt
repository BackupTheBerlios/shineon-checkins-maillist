From nobody at sheep.berlios.de  Thu Mar 16 20:32:37 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Thu, 16 Mar 2006 20:32:37 +0100
Subject: [Shineon-checkins] ShineOn/ShineOn.RTL Classes.pas,1.13,1.14
Message-ID: <200603161932.k2GJWbb32073@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/ShineOn.RTL
In directory sheep:/tmp/cvs-serv10560/ShineOn.RTL

Modified Files:
	Classes.pas 
Log Message:
Fixed THandleStream.WriteLine: Object was not instantiated.

Index: Classes.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL/Classes.pas,v
retrieving revision 1.13
retrieving revision 1.14
diff -C2 -d -r1.13 -r1.14
*** Classes.pas	18 Jul 2005 13:09:32 -0000	1.13
--- Classes.pas	16 Mar 2006 18:33:56 -0000	1.14
***************
*** 15,20 ****
  
  // HISTORY:
! // May 8 2005   :   Jeroen Vandezande   : Implemented TList.Assign
! // May 11 2005  :   Jeroen Vandezande   : Implemented IEnumerator on TList
  
  interface
--- 15,21 ----
  
  // HISTORY:
! // May 8 2005     :   Jeroen Vandezande   : Implemented TList.Assign
! // May 11 2005    :   Jeroen Vandezande   : Implemented IEnumerator on TList
! // March 16 2006  :   Jeroen Vandezande   : Fixed THandleStream.WriteLine
  
  interface
***************
*** 975,979 ****
  end;
  
! procedure TList.SetCapacity(Value:integer);
  begin
    FList.Capacity := Value;
--- 976,980 ----
  end;
  
! procedure TList.SetCapacity(const Value:integer);
  begin
    FList.Capacity := Value;
***************
*** 985,989 ****
  end;
  
! procedure TList.SetCount(Value:integer);
  var
    I: Integer;
--- 986,990 ----
  end;
  
! procedure TList.SetCount(const Value:integer);
  var
    I: Integer;
***************
*** 1008,1012 ****
  end;
  
! procedure TList.Put(Index:integer; Value:Object);
  var Temp:Object;
  begin
--- 1009,1013 ----
  end;
  
! procedure TList.Put(Index:integer; const Value:Object);
  var Temp:Object;
  begin
***************
*** 2190,2194 ****
  end;
  
! procedure THandleStream.SetSize(NewSize: Int64); 
  begin
    FStream.SetLength(NewSize);
--- 2191,2195 ----
  end;
  
! procedure THandleStream.SetSize(const NewSize: Int64); 
  begin
    FStream.SetLength(NewSize);
***************
*** 2236,2247 ****
  function THandleStream.ReadLine: string; 
  begin
!   with T:System.IO.StreamReader := new System.IO.StreamReader(FStream) do
      Result := T.ReadLine;
  end;
  
  procedure THandleStream.WriteLine(Value:string); 
  begin
!   with T:System.IO.StreamWriter := System.IO.StreamWriter(FStream) do
      T.WriteLine(Value); 
  end;
  
--- 2237,2252 ----
  function THandleStream.ReadLine: string; 
  begin
!   with T := new System.IO.StreamReader(FStream) do 
!   begin  
      Result := T.ReadLine;
+   end;
  end;
  
  procedure THandleStream.WriteLine(Value:string); 
  begin
!   with T := new System.IO.StreamWriter(FStream) do 
!   begin  
      T.WriteLine(Value); 
+   end;
  end;
  



From nobody at sheep.berlios.de  Thu Mar 16 20:35:39 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Thu, 16 Mar 2006 20:35:39 +0100
Subject: [Shineon-checkins] ShineOn/ShineOn.RTL Types.pas,1.16,1.17
Message-ID: <200603161935.k2GJZdb32295@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/ShineOn.RTL
In directory sheep:/tmp/cvs-serv11400/ShineOn.RTL

Modified Files:
	Types.pas 
Log Message:
changed Integer to Word of some var's in TryEncodeDateTime & TryEncodeDate

Index: Types.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL/Types.pas,v
retrieving revision 1.16
retrieving revision 1.17
diff -C2 -d -r1.16 -r1.17
*** Types.pas	18 Jul 2005 13:28:16 -0000	1.16
--- Types.pas	16 Mar 2006 18:36:59 -0000	1.17
***************
*** 12,15 ****
--- 12,16 ----
  //
  // 2005-06-04   :   Lloyd Kinsella    : More complete implementation of TDateTime
+ // 2006-03-16   :   Jeroen Vandezande : changed Integer to Word of some var's in TryEncodeDateTime & TryEncodeDate
  
  namespace ShineOn.RTL;
***************
*** 631,635 ****
  class function TDateTime.TryEncodeDate(Year, Month, Day: Word; out Rslt: TDateTime): Boolean;
  var
!   Offset, DIM: Integer;
  begin
    Result := False;
--- 632,636 ----
  class function TDateTime.TryEncodeDate(Year, Month, Day: Word; out Rslt: TDateTime): Boolean;
  var
!   Offset, DIM: word;
  begin
    Result := False;
***************
*** 668,672 ****
  class function TDateTime.TryEncodeDateTime(const Year, Month, Day, Hour, Minute, Second, MSec: Word; out Rslt: TDateTime): Boolean;
  var
!   Offset, DIM: Integer;
  begin
    Result := False;
--- 669,673 ----
  class function TDateTime.TryEncodeDateTime(const Year, Month, Day, Hour, Minute, Second, MSec: Word; out Rslt: TDateTime): Boolean;
  var
!   Offset, DIM: word;
  begin
    Result := False;



From nobody at sheep.berlios.de  Thu Mar 16 21:17:17 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Thu, 16 Mar 2006 21:17:17 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestSystem.pas,1.5,1.6
Message-ID: <200603162017.k2GKHHb01231@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv30293/NUnit

Modified Files:
	TestSystem.pas 
Log Message:
Implemented the [Test, Ignore('Test not implemented')] attribute.
Fixed the SystemTests.StringOfChar method.

Index: TestSystem.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestSystem.pas,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** TestSystem.pas	18 Jul 2005 13:09:31 -0000	1.5
--- TestSystem.pas	16 Mar 2006 19:18:37 -0000	1.6
***************
*** 8,11 ****
--- 8,17 ----
  
  // $Id$
+ 
+ // History:
+ //
+ // 2006-03-16   :   Jeroen Vandezande    :  Implemented the [Test, Ignore('Test not implemented')] attribute.
+ //                                          Fixed the SystemTests.StringOfChar method.
+ 
  namespace NUnit.ShineOn.RTL;
  
***************
*** 47,51 ****
      [Test]
      method Copy;
!     [Test]
      method Str;
      [Test]
--- 53,57 ----
      [Test]
      method Copy;
!     [Test, Ignore('Test not implemented')]
      method Str;
      [Test]
***************
*** 77,85 ****
      [Test]
      method IntDouble;
!     [Test]
      method IntTDateTime;
      [Test]
      method FracDouble;
!     [Test]
      method FracTDateTime;
      [Test]
--- 83,91 ----
      [Test]
      method IntDouble;
!     [Test, Ignore('Test not implemented')]
      method IntTDateTime;
      [Test]
      method FracDouble;
!     [Test, Ignore('Test not implemented')]
      method FracTDateTime;
      [Test]
***************
*** 101,111 ****
      [Test]
      method SetLength;
!     [Test]
      method Write;
!     [Test]
      method WriteLn;
!     [Test]
      method Read;
!     [Test]
      method ReadLn;
      [Test]
--- 107,117 ----
      [Test]
      method SetLength;
!     [Test, Ignore('Test not implemented')]
      method Write;
!     [Test, Ignore('Test not implemented')]
      method WriteLn;
!     [Test, Ignore('Test not implemented')]
      method Read;
!     [Test, Ignore('Test not implemented')]
      method ReadLn;
      [Test]
***************
*** 420,424 ****
  begin
    var D:TDateTime := new TDateTime(DateTime.Today);
!   NUnit.Framework.Assert.AreEqual(d, ShineOn.RTL.System.Abs(-d));
  end;
  
--- 426,430 ----
  begin
    var D:TDateTime := new TDateTime(DateTime.Today);
!   NUnit.Framework.Assert.AreEqual(d, ShineOn.RTL.System.Abs(d));
  end;
  
***************
*** 458,462 ****
  begin
    var S:String := ShineOn.RTL.System.StringOfChar('A', 1);
!   NUnit.Framework.Assert.AreEqual('A', S);
    S := ShineOn.RTL.System.StringOfChar('A', 2);
    NUnit.Framework.Assert.AreEqual('AA', S);
--- 464,469 ----
  begin
    var S:String := ShineOn.RTL.System.StringOfChar('A', 1);
!   var S2:String := 'A';
!   NUnit.Framework.Assert.AreEqual(S2, S);
    S := ShineOn.RTL.System.StringOfChar('A', 2);
    NUnit.Framework.Assert.AreEqual('AA', S);



From nobody at sheep.berlios.de  Fri Mar 17 16:22:36 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:22:36 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestClasses.pas,1.2,1.3
Message-ID: <200603171522.k2HFMab16304@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv19874/NUnit

Modified Files:
	TestClasses.pas 
Log Message:
Added the [Test, Ignore('Test not implemented')]  attribute to not implemented test methods.

Index: TestClasses.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestClasses.pas,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** TestClasses.pas	18 Jul 2005 13:09:31 -0000	1.2
--- TestClasses.pas	17 Mar 2006 14:23:55 -0000	1.3
***************
*** 12,18 ****
  interface
  uses
    Nunit.Framework,
    ShineOn.RTL;
!   
  type
    [TestFixture]
--- 12,19 ----
  interface
  uses
+   System.IO,
    Nunit.Framework,
    ShineOn.RTL;
!     
  type
    [TestFixture]
***************
*** 23,35 ****
      [TearDown]
      method TearDown;override;
!     [Test]
      method ClassType;
!     [Test]
      method ClassName;
!     [Test]
      method ClassNameIs;
!     [Test]
      method ClassParent;
!     [Test]
      method ClassInfo;
    end;
--- 24,36 ----
      [TearDown]
      method TearDown;override;
!     [Test, Ignore('Test not implemented')] 
      method ClassType;
!     [Test, Ignore('Test not implemented')] 
      method ClassName;
!     [Test, Ignore('Test not implemented')] 
      method ClassNameIs;
!     [Test, Ignore('Test not implemented')] 
      method ClassParent;
!     [Test, Ignore('Test not implemented')] 
      method ClassInfo;
    end;
***************
*** 43,87 ****
      method TearDown;override;
  
!     [Test]
      method Add;
!     [Test]
      method Clear;
!     [Test]
      method Delete;
!     [Test]
      method Exchange;
!     [Test]
      method Expand;
!     [Test]
      method Extract;
!     [Test]
      method First;
!     [Test]
      method GetEnumerator;
!     [Test]
      method IndexOf;
!     [Test]
      method Insert;
!     [Test]
      method Last;
!     [Test]
      method Move;
!     [Test]
      method Remove;
!     [Test]
      method Pack;
!     [Test]
      method Sort;
!     [Test]
      method Assign1;
!     [Test]
      method Assign2;
!     [Test]
      method Assign3;
!     [Test]
      method Capacity;
!     [Test]
      method Count;
!     [Test]
      method Items;
    end;
--- 44,88 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method Delete;
!     [Test, Ignore('Test not implemented')] 
      method Exchange;
!     [Test, Ignore('Test not implemented')] 
      method Expand;
!     [Test, Ignore('Test not implemented')] 
      method Extract;
!     [Test, Ignore('Test not implemented')] 
      method First;
!     [Test, Ignore('Test not implemented')] 
      method GetEnumerator;
!     [Test, Ignore('Test not implemented')] 
      method IndexOf;
!     [Test, Ignore('Test not implemented')] 
      method Insert;
!     [Test, Ignore('Test not implemented')] 
      method Last;
!     [Test, Ignore('Test not implemented')] 
      method Move;
!     [Test, Ignore('Test not implemented')] 
      method Remove;
!     [Test, Ignore('Test not implemented')] 
      method Pack;
!     [Test, Ignore('Test not implemented')] 
      method Sort;
!     [Test, Ignore('Test not implemented')] 
      method Assign1;
!     [Test, Ignore('Test not implemented')] 
      method Assign2;
!     [Test, Ignore('Test not implemented')] 
      method Assign3;
!     [Test, Ignore('Test not implemented')] 
      method Capacity;
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method Items;
    end;
***************
*** 94,126 ****
      [TearDown]
      method TearDown;override;
!     [Test]
      method Clear;
!     [Test]
      method Delete;
!     [Test]
      method Exchange;
!     [Test]
      method Expand;
!     [Test]
      method First;
!     [Test]
      method IndexOf;
!     [Test]
      method Add;
!     [Test]
      method Insert;
!     [Test]
      method Last;
!     [Test]
      method Remove;
!     [Test]
      method Lock;
!     [Test]
      method Unlock;
!     [Test]
      method Capacity;
!     [Test]
      method Count;
!     [Test]
      method Items;
    end;
--- 95,127 ----
      [TearDown]
      method TearDown;override;
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method Delete;
!     [Test, Ignore('Test not implemented')] 
      method Exchange;
!     [Test, Ignore('Test not implemented')] 
      method Expand;
!     [Test, Ignore('Test not implemented')] 
      method First;
!     [Test, Ignore('Test not implemented')] 
      method IndexOf;
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method Insert;
!     [Test, Ignore('Test not implemented')] 
      method Last;
!     [Test, Ignore('Test not implemented')] 
      method Remove;
!     [Test, Ignore('Test not implemented')] 
      method Lock;
!     [Test, Ignore('Test not implemented')] 
      method Unlock;
!     [Test, Ignore('Test not implemented')] 
      method Capacity;
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method Items;
    end;
***************
*** 134,142 ****
      method TearDown;override;
  
!     [Test]
      method OpenBit;
!     [Test]
      method Bits;
!     [Test]
      method Size;
    end;
--- 135,143 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method OpenBit;
!     [Test, Ignore('Test not implemented')] 
      method Bits;
!     [Test, Ignore('Test not implemented')] 
      method Size;
    end;
***************
*** 150,156 ****
      method TearDown;override;
  
!     [Test]
      method Assign;
!     [Test]
      method GetNamePath;
    end;
--- 151,157 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Assign;
!     [Test, Ignore('Test not implemented')] 
      method GetNamePath;
    end;
***************
*** 164,249 ****
      method TearDown;override;
  
!     [Test]
      method Add;
!     [Test]
      method AddObject;
!     [Test]
      method Append;
!     [Test]
      method AddStrings;
!     [Test]
      method Assign;
!     [Test]
      method BeginUpdate;
!     [Test]
      method Clear;
!     [Test]
      method Delete;
!     [Test]
      method EndUpdate;
!     [Test]
      method Equals;
!     [Test]
      method Exchange;
!     [Test]
      method GetText;
!     [Test]
      method IndexOf;
!     [Test]
      method IndexOfName;
!     [Test]
      method IndexOfObject;
!     [Test]
      method Insert;
!     [Test]
      method InsertObject;
!     [Test]
      method LoadFromFile;
!     [Test]
      method LoadFromStream;
!     [Test]
      method Move;
!     [Test]
      method SaveToFile;
!     [Test]
      method SaveToStream;
!     [Test]
      method SetText;
!     [Test]
      method Capacity;
!     [Test]
      method CommaText;
!     [Test]
      method Count;
!     [Test]
      method Delimiter;
!     [Test]
      method DelimitedText;
!     [Test]
      method Names;
!     [Test]
      method Objects;
!     [Test]
      method QuoteChar;
!     [Test]
      method Values;
!     [Test]
      method Strings;
!     [Test]
      method Text;
  
!     [Test]
      method Sort;
!     [Test]
      method CustomSort;
!     [Test]
      method Duplicates;
!     [Test]
      method Sorted;
!     [Test]
      method CaseSensitive;
    end;
  
- 
    [TestFixture]
    THandleStreamTests = public class(TestCase)
--- 165,249 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method AddObject;
!     [Test, Ignore('Test not implemented')] 
      method Append;
!     [Test, Ignore('Test not implemented')] 
      method AddStrings;
!     [Test, Ignore('Test not implemented')] 
      method Assign;
!     [Test, Ignore('Test not implemented')] 
      method BeginUpdate;
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method Delete;
!     [Test, Ignore('Test not implemented')] 
      method EndUpdate;
!     [Test, Ignore('Test not implemented')] 
      method Equals;
!     [Test, Ignore('Test not implemented')] 
      method Exchange;
!     [Test, Ignore('Test not implemented')] 
      method GetText;
!     [Test, Ignore('Test not implemented')] 
      method IndexOf;
!     [Test, Ignore('Test not implemented')] 
      method IndexOfName;
!     [Test, Ignore('Test not implemented')] 
      method IndexOfObject;
!     [Test, Ignore('Test not implemented')] 
      method Insert;
!     [Test, Ignore('Test not implemented')] 
      method InsertObject;
!     [Test, Ignore('Test not implemented')] 
      method LoadFromFile;
!     [Test, Ignore('Test not implemented')] 
      method LoadFromStream;
!     [Test, Ignore('Test not implemented')] 
      method Move;
!     [Test, Ignore('Test not implemented')] 
      method SaveToFile;
!     [Test, Ignore('Test not implemented')] 
      method SaveToStream;
!     [Test, Ignore('Test not implemented')] 
      method SetText;
!     [Test, Ignore('Test not implemented')] 
      method Capacity;
!     [Test, Ignore('Test not implemented')] 
      method CommaText;
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method Delimiter;
!     [Test, Ignore('Test not implemented')] 
      method DelimitedText;
!     [Test, Ignore('Test not implemented')] 
      method Names;
!     [Test, Ignore('Test not implemented')] 
      method Objects;
!     [Test, Ignore('Test not implemented')] 
      method QuoteChar;
!     [Test, Ignore('Test not implemented')] 
      method Values;
!     [Test, Ignore('Test not implemented')] 
      method Strings;
!     [Test, Ignore('Test not implemented')] 
      method Text;
  
!     [Test, Ignore('Test not implemented')] 
      method Sort;
!     [Test, Ignore('Test not implemented')] 
      method CustomSort;
!     [Test, Ignore('Test not implemented')] 
      method Duplicates;
!     [Test, Ignore('Test not implemented')] 
      method Sorted;
!     [Test, Ignore('Test not implemented')] 
      method CaseSensitive;
    end;
  
    [TestFixture]
    THandleStreamTests = public class(TestCase)
***************
*** 254,270 ****
      method TearDown;override;
  
!     [Test]
      method Read;
!     [Test]
      method Write;
!     [Test]
      method SeekSeekOrigin;
!     [Test]
      method SeekInteger;
!     [Test]
      method CopyFrom;
!     [Test]
      method Position;
!     [Test]
      method Size;
    end;
--- 254,270 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Read;
!     [Test, Ignore('Test not implemented')] 
      method Write;
!     [Test, Ignore('Test not implemented')] 
      method SeekSeekOrigin;
!     [Test, Ignore('Test not implemented')] 
      method SeekInteger;
!     [Test, Ignore('Test not implemented')] 
      method CopyFrom;
!     [Test, Ignore('Test not implemented')] 
      method Position;
!     [Test, Ignore('Test not implemented')] 
      method Size;
    end;
***************
*** 272,275 ****
--- 272,284 ----
    [TestFixture]
    TFileStreamTests = public class(TestCase)
+   private
+     const fmCreate = $FFFF; // Classes
+     const fmOpenRead = $0000; // SysUtils
+     const fmOpenWrite = $0001; // SysUtils
+     const fmOpenReadWrite = $0002; // SysUtils    
+     var Mode : System.IO.FileMode;
+ 
+     var FFilename : String;
+     var tmpFile : TFileStream;
    public
      [Setup]
***************
*** 278,294 ****
      method TearDown;override;
  
!     [Test]
      method Read;
!     [Test]
      method Write;
!     [Test]
      method SeekSeekOrigin;
!     [Test]
      method SeekInteger;
!     [Test]
      method CopyFrom;
!     [Test]
      method Position;
!     [Test]
      method Size;
  
--- 287,303 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Read;
!     [Test, Ignore('Test not implemented')] 
      method Write;
!     [Test, Ignore('Test not implemented')] 
      method SeekSeekOrigin;
!     [Test, Ignore('Test not implemented')] 
      method SeekInteger;
!     [Test, Ignore('Test not implemented')] 
      method CopyFrom;
!     [Test, Ignore('Test not implemented')] 
      method Position;
!     [Test, Ignore('Test not implemented')] 
      method Size;
  
***************
*** 303,330 ****
      method TearDown;override;
  
!     [Test]
      method Read;
!     [Test]
      method Write;
!     [Test]
      method SeekSeekOrigin;
!     [Test]
      method SeekInteger;
!     [Test]
      method CopyFrom;
!     [Test]
      method Position;
!     [Test]
      method Size;
  
!     [Test]
      method SaveToStream;
!     [Test]
      method SaveToFile;
!     [Test]
      method Clear;
!     [Test]
      method LoadFromStream;
!     [Test]
      method LoadFromFile;
    end;
--- 312,339 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Read;
!     [Test, Ignore('Test not implemented')] 
      method Write;
!     [Test, Ignore('Test not implemented')] 
      method SeekSeekOrigin;
!     [Test, Ignore('Test not implemented')] 
      method SeekInteger;
!     [Test, Ignore('Test not implemented')] 
      method CopyFrom;
!     [Test, Ignore('Test not implemented')] 
      method Position;
!     [Test, Ignore('Test not implemented')] 
      method Size;
  
!     [Test, Ignore('Test not implemented')] 
      method SaveToStream;
!     [Test, Ignore('Test not implemented')] 
      method SaveToFile;
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method LoadFromStream;
!     [Test, Ignore('Test not implemented')] 
      method LoadFromFile;
    end;
***************
*** 338,359 ****
      method TearDown;override;
  
!     [Test]
      method Read;
!     [Test]
      method Write;
!     [Test]
      method SeekSeekOrigin;
!     [Test]
      method SeekInteger;
!     [Test]
      method CopyFrom;
!     [Test]
      method Position;
!     [Test]
      method Size;
  
!     [Test]
      method ReadString;
!     [Test]
      method WriteString;
    end;
--- 347,368 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Read;
!     [Test, Ignore('Test not implemented')] 
      method Write;
!     [Test, Ignore('Test not implemented')] 
      method SeekSeekOrigin;
!     [Test, Ignore('Test not implemented')] 
      method SeekInteger;
!     [Test, Ignore('Test not implemented')] 
      method CopyFrom;
!     [Test, Ignore('Test not implemented')] 
      method Position;
!     [Test, Ignore('Test not implemented')] 
      method Size;
  
!     [Test, Ignore('Test not implemented')] 
      method ReadString;
!     [Test, Ignore('Test not implemented')] 
      method WriteString;
    end;
***************
*** 367,383 ****
      method TearDown;override;
  
!     [Test]
      method Read;
!     [Test]
      method Write;
!     [Test]
      method SeekSeekOrigin;
!     [Test]
      method SeekInteger;
!     [Test]
      method CopyFrom;
!     [Test]
      method Position;
!     [Test]
      method Size;
    end;
--- 376,392 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Read;
!     [Test, Ignore('Test not implemented')] 
      method Write;
!     [Test, Ignore('Test not implemented')] 
      method SeekSeekOrigin;
!     [Test, Ignore('Test not implemented')] 
      method SeekInteger;
!     [Test, Ignore('Test not implemented')] 
      method CopyFrom;
!     [Test, Ignore('Test not implemented')] 
      method Position;
!     [Test, Ignore('Test not implemented')] 
      method Size;
    end;
***************
*** 391,414 ****
      method TearDown;override;
  
!     [Test]
      method Resume;
!     [Test]
      method Suspend;
!     [Test]
      method Terminate;
!     [Test]
      method WaitFor;
  
!     [Test]
      method FatalException;
!     [Test]
      method FreeOnTerminate;
!     [Test]
      method Handle;
!     [Test]
      method Priority;
!     [Test]
      method Suspended;
!     [Test]
      method ThreadID;
    end;
--- 400,423 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Resume;
!     [Test, Ignore('Test not implemented')] 
      method Suspend;
!     [Test, Ignore('Test not implemented')] 
      method Terminate;
!     [Test, Ignore('Test not implemented')] 
      method WaitFor;
  
!     [Test, Ignore('Test not implemented')] 
      method FatalException;
!     [Test, Ignore('Test not implemented')] 
      method FreeOnTerminate;
!     [Test, Ignore('Test not implemented')] 
      method Handle;
!     [Test, Ignore('Test not implemented')] 
      method Priority;
!     [Test, Ignore('Test not implemented')] 
      method Suspended;
!     [Test, Ignore('Test not implemented')] 
      method ThreadID;
    end;
***************
*** 939,942 ****
--- 948,952 ----
  method TFileStreamTests.TearDown; 
  begin
+   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  



From nobody at sheep.berlios.de  Fri Mar 17 16:23:38 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:23:38 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestContnrs.pas,1.2,1.3
Message-ID: <200603171523.k2HFNcb16330@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv20608/NUnit

Modified Files:
	TestContnrs.pas 
Log Message:
Added the [Test, Ignore('Test not implemented')]  attribute to not implemented test methods.

Index: TestContnrs.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestContnrs.pas,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** TestContnrs.pas	18 Jul 2005 13:09:31 -0000	1.2
--- TestContnrs.pas	17 Mar 2006 14:24:58 -0000	1.3
***************
*** 23,43 ****
      [TearDown]
      method TearDown;override;
!     [Test]
      method Add;
!     [Test]
      method Extract;
!     [Test]
      method Remove;
!     [Test]
      method IndexOf;
!     [Test]
      method FindInstanceOf;
!     [Test]
      method Insert;
!     [Test]
      method First;
!     [Test]
      method Last;
!     [Test]
      method Items;
    end;
--- 23,43 ----
      [TearDown]
      method TearDown;override;
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method Extract;
!     [Test, Ignore('Test not implemented')] 
      method Remove;
!     [Test, Ignore('Test not implemented')] 
      method IndexOf;
!     [Test, Ignore('Test not implemented')] 
      method FindInstanceOf;
!     [Test, Ignore('Test not implemented')] 
      method Insert;
!     [Test, Ignore('Test not implemented')] 
      method First;
!     [Test, Ignore('Test not implemented')] 
      method Last;
!     [Test, Ignore('Test not implemented')] 
      method Items;
    end;
***************
*** 51,69 ****
      method TearDown;override;
  
!     [Test]
      method Add;
!     [Test]
      method Extract;
!     [Test]
      method Remove;
!     [Test]
      method IndexOf;
!     [Test]
      method First;
!     [Test]
      method Last;
!     [Test]
      method Insert;
!     [Test]
      method Items;
    end;
--- 51,69 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method Extract;
!     [Test, Ignore('Test not implemented')] 
      method Remove;
!     [Test, Ignore('Test not implemented')] 
      method IndexOf;
!     [Test, Ignore('Test not implemented')] 
      method First;
!     [Test, Ignore('Test not implemented')] 
      method Last;
!     [Test, Ignore('Test not implemented')] 
      method Insert;
!     [Test, Ignore('Test not implemented')] 
      method Items;
    end;
***************
*** 77,95 ****
      method TearDown;override;
  
!     [Test]
      method Add;
!     [Test]
      method Extract;
!     [Test]
      method Remove;
!     [Test]
      method IndexOf;
!     [Test]
      method First;
!     [Test]
      method Last;
!     [Test]
      method Insert;
!     [Test]
      method Items;
    end;
--- 77,95 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method Extract;
!     [Test, Ignore('Test not implemented')] 
      method Remove;
!     [Test, Ignore('Test not implemented')] 
      method IndexOf;
!     [Test, Ignore('Test not implemented')] 
      method First;
!     [Test, Ignore('Test not implemented')] 
      method Last;
!     [Test, Ignore('Test not implemented')] 
      method Insert;
!     [Test, Ignore('Test not implemented')] 
      method Items;
    end;
***************
*** 103,115 ****
      method TearDown;override;
  
!     [Test]
      method Count;
!     [Test]
      method AtLeast;
!     [Test]
      method Push;
!     [Test]
      method Pop;
!     [Test]
      method Peek;
    end;
--- 103,115 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method AtLeast;
!     [Test, Ignore('Test not implemented')] 
      method Push;
!     [Test, Ignore('Test not implemented')] 
      method Pop;
!     [Test, Ignore('Test not implemented')] 
      method Peek;
    end;
***************
*** 123,135 ****
      method TearDown;override;
  
!     [Test]
      method Count;
!     [Test]
      method AtLeast;
!     [Test]
      method Push;
!     [Test]
      method Pop;
!     [Test]
      method Peek;
    end;
--- 123,135 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method AtLeast;
!     [Test, Ignore('Test not implemented')] 
      method Push;
!     [Test, Ignore('Test not implemented')] 
      method Pop;
!     [Test, Ignore('Test not implemented')] 
      method Peek;
    end;
***************
*** 143,155 ****
      method TearDown;override;
  
!     [Test]
      method Count;
!     [Test]
      method AtLeast;
!     [Test]
      method Push;
!     [Test]
      method Pop;
!     [Test]
      method Peek;
    end;
--- 143,155 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method AtLeast;
!     [Test, Ignore('Test not implemented')] 
      method Push;
!     [Test, Ignore('Test not implemented')] 
      method Pop;
!     [Test, Ignore('Test not implemented')] 
      method Peek;
    end;
***************
*** 163,175 ****
      method TearDown;override;
  
!     [Test]
      method Count;
!     [Test]
      method AtLeast;
!     [Test]
      method Push;
!     [Test]
      method Pop;
!     [Test]
      method Peek;
    end;
--- 163,175 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Count;
!     [Test, Ignore('Test not implemented')] 
      method AtLeast;
!     [Test, Ignore('Test not implemented')] 
      method Push;
!     [Test, Ignore('Test not implemented')] 
      method Pop;
!     [Test, Ignore('Test not implemented')] 
      method Peek;
    end;
***************
*** 183,201 ****
      method TearDown;override;
  
!     [Test]
      method Clear;
!     [Test]
      method Add;
!     [Test]
      method Remove;
!     [Test]
      method ForEach;
!     [Test]
      method Assign;
!     [Test]
      method Exists;
!     [Test]
      method Find;
!     [Test]
      method Data;
    end;
--- 183,201 ----
      method TearDown;override;
  
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method Add;
!     [Test, Ignore('Test not implemented')] 
      method Remove;
!     [Test, Ignore('Test not implemented')] 
      method ForEach;
!     [Test, Ignore('Test not implemented')] 
      method Assign;
!     [Test, Ignore('Test not implemented')] 
      method Exists;
!     [Test, Ignore('Test not implemented')] 
      method Find;
!     [Test, Ignore('Test not implemented')] 
      method Data;
    end;



From nobody at sheep.berlios.de  Fri Mar 17 16:24:59 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:24:59 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestFileStream.pas,NONE,1.1
Message-ID: <200603171524.k2HFOxb16373@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv21847/NUnit

Added Files:
	TestFileStream.pas 
Log Message:
New Test unit contributed by Corwin Burgess

--- NEW FILE: TestFileStream.pas ---
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the "License"); 
// you may not use this file except in compliance with the License. You may obtain a copy of the 
// License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF 
// ANY KIND, either express or implied. See the License for the specificlanguage governing rights and 
// limitations under the License.

namespace NUnit.ShineOn.RTL;
// TestFixture to test FileSteam

interface
uses
    System.IO,
    System.Collections,    
    Nunit.Framework,
    ShineOn.RTL;

type
    [TestFixture]
    TestFileStream = public class(TestCase)
  private
      var nl : String := #13#10;  
      var bazFileName : String; // := Path.GetTempPath + 'TestFileStream.txt';
      //var bazFileName : String := Path.Combine ('resources', 'baz');
  protected
  public
    [Setup]
    method Setup;override;
    [TearDown]
    method TearDown;override;
    [Test] 
	[ExpectedException(typeof(IOException))]	// used by an another process
 	method CtorIOException; 
    [Test] 
	method Flush;
    [Test] 
    method Seek;
    [Test] 
    [ExpectedException (typeof(NotSupportedException))]
	method TestWriteVerifyAccessMode; // Write not enabled (read only)
    [Test] 
    [ExpectedException (typeof (NotSupportedException))]
	method TestWriteByteVerifyAccessMode; // Write not enabled (read only)
    [Test] 
	method TestReadVerifyAccessMode; 	// works without [ExpectedException (typeof (NotSupportedException))]
    [Test] 
	method TestReadByteVerifyAccessMode; // workds without [ExpectedException (typeof (NotSupportedException))]

    // add test attribute
    [Test] 
    method TestCtr;
    [Test] 
    method TestCtorExceptions;
    [Test] 
    method TestCtorExceptions2;
    [Test] 
    method TestDefaultProperties;
    [Test] 
    method TestLock;
    [Test] 
    method TestSeek;
    [Test] 
    method TestClose;
           
    // Added to test StreamWriter           
    [Test]  //[ExpectedException(typeof(NullReferenceException))]
    method SaveToFile;
    [Test] 
    method SaveToFileSystemIO;
    
  end;
  
implementation

method TestFileStream.Setup; 
begin
    bazFileName := System.IO.Path.GetTempPath + 'TestFileStream.txt';
    System.IO.File.Delete (bazFileName);
end;

method TestFileStream.TearDown; 
begin
    System.IO.File.Delete (bazFileName);
end;

method TestFileStream.CtorIOException; 
begin
    var path : String := System.IO.Path.GetTempPath + 'CTorIOException.Test';
	if (System.IO.File.Exists (path)) then
	    System.IO.File.Delete (path);
			
	var S:System.IO.FileStream;
    S := new System.IO.FileStream (path, System.IO.FileMode.CreateNew);
	// used by an another process
	var S2:System.IO.FileStream;
    S2 := new System.IO.FileStream (path, System.IO.FileMode.OpenOrCreate);
end;

method TestFileStream.Flush; 
begin
    var path : String := System.IO.Path.GetTempPath + 'FileStreamTest.Flush';
	if (System.IO.File.Exists(path)) then
	    System.IO.File.Delete(path);
			
	var S:System.IO.FileStream;
    S := new System.IO.FileStream (path, System.IO.FileMode.CreateNew, System.IO.FileAccess.ReadWrite, System.IO.FileShare.ReadWrite);
	var S2:System.IO.FileStream;
    S2 := new System.IO.FileStream (path, System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite, System.IO.FileShare.ReadWrite);

    var wbyte : Array of Byte := [1, 2, 3, 4, 5];
    // 		stream.Write (new byte [] {1, 2, 3, 4, 5}, 0, 5);
	//stream.Write (new Byte [1, 2, 3, 4, 5], 0, 5); //}, 0, 5);
	S.Write(wbyte, 0, 5);
						
	var bytes : Array of Byte := new byte [5];
	S2.Read(bytes, 0, 5);
			
	NUnit.Framework.Assert.AreEqual(0, bytes [0], 'test#01');
	NUnit.Framework.Assert.AreEqual(0, bytes [1], 'test#02');
	NUnit.Framework.Assert.AreEqual(0, bytes [2], 'test#03');
	NUnit.Framework.Assert.AreEqual(0, bytes [3], 'test#04');
			
	S.Flush ();
	S2.Read (bytes, 0, 5);			
	NUnit.Framework.Assert.AreEqual(1, bytes [0], 'test#05');
	NUnit.Framework.Assert.AreEqual(2, bytes [1], 'test#06');
	NUnit.Framework.Assert.AreEqual(3, bytes [2], 'test#07');
	NUnit.Framework.Assert.AreEqual(4, bytes [3], 'test#08');
	S.Close;
	S2.Close;
			
	if (System.IO.File.Exists(path)) then
	    System.IO.File.Delete(path);			
end;

method TestFileStream.Seek; 
begin
    var path : String := System.IO.Path.GetTempPath + 'Seek.Test';
    if (System.IO.File.Exists(path)) then
        System.IO.File.Delete(path);
                	
    var S:System.IO.FileStream;
    S := new System.IO.FileStream(path, System.IO.FileMode.CreateNew, System.IO.FileAccess.ReadWrite, System.IO.FileShare.ReadWrite);
    var S2:System.IO.FileStream;
    S2 := new System.IO.FileStream (path, System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite, System.IO.FileShare.ReadWrite);
           
    var wbyte : Array of Byte := [1, 2, 3, 4, 5, 6, 7, 8, 10];
    //stream.Write (new byte [] {1, 2, 3, 4, 5, 6, 7, 8, 10}, 0, 9);
	S.Write (wbyte, 0, 9);
    NUnit.Framework.Assert.AreEqual(5, S2.Seek (5, System.IO.SeekOrigin.Begin), 'test#01');
    NUnit.Framework.Assert.AreEqual(-1, S2.ReadByte, 'test#02');
                	
    NUnit.Framework.Assert.AreEqual(2, S2.Seek (-3, System.IO.SeekOrigin.Current), 'test#03');
    NUnit.Framework.Assert.AreEqual(-1, S2.ReadByte, 'test#04');
                	
    NUnit.Framework.Assert.AreEqual(12, S.Seek (3, System.IO.SeekOrigin.Current), 'test#05');
    NUnit.Framework.Assert.AreEqual(-1, S.ReadByte, 'test#06');

    NUnit.Framework.Assert.AreEqual(5, S.Seek (-7, System.IO.SeekOrigin.Current), 'test#07');
    NUnit.Framework.Assert.AreEqual(6, S.ReadByte, 'test#08');

    NUnit.Framework.Assert.AreEqual(5, S2.Seek (5, System.IO.SeekOrigin.Begin), 'test#09');
    NUnit.Framework.Assert.AreEqual(6, S2.ReadByte, 'test#10');
                	                	
    S.Close;
    S2.Close;

    if (System.IO.File.Exists(path)) then
        System.IO.File.Delete(path);                	
end;

method TestFileStream.TestWriteVerifyAccessMode; 
begin
    var bazFileStream:System.IO.FileStream := nil;
	var buffer : Array of Byte;

	try
        buffer := System.Text.Encoding.ASCII.GetBytes ('test');
		bazFileStream := new System.IO.FileStream (bazFileName, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.Read);
		bazFileStream.Write (buffer, 0, buffer.Length);
    finally
        if (bazFileStream <> nil) then
		    bazFileStream.Close;
    end;
// NUnit.ShineOn.RTL.TestFileStream.TestWriteVerifyAccessMode : 
// System.NotSupportedException : 
// Stream does not support writing.
end;

method TestFileStream.TestWriteByteVerifyAccessMode; 
begin
    var bazFileStream : System.IO.FileStream := nil;

	try
	    bazFileStream := new System.IO.FileStream (bazFileName, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.Read);
		bazFileStream.WriteByte(Byte.MinValue);
    finally
	    if (bazFileStream <> nil) then
		    bazFileStream.Close;
    end;
// NUnit.ShineOn.RTL.TestFileStream.TestWriteByteVerifyAccessMode :
// System.NotSupportedException : 
// Stream does not support writing.
end;

method TestFileStream.TestReadVerifyAccessMode; 
begin
    var bazFileStream : System.IO.FileStream := nil;
	var buffer : Array of Byte := new byte [100];

	try
        bazFileStream := new System.IO.FileStream (bazFileName, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.Write);
		bazFileStream.Read (buffer, 0, buffer.Length);
    except
	    if (bazFileStream <> nil) then
		    bazFileStream.Close;
    end;
end;

method TestFileStream.TestReadByteVerifyAccessMode; 
begin
    var bazFileStream : System.IO.FileStream := nil;

	try
	    bazFileStream := new System.IO.FileStream (bazFileName, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.Write);
		var readByte : Integer := bazFileStream.ReadByte;
    except
	    if (bazFileStream <> nil) then
		    bazFileStream.Close;
    end;
end;

method TestFileStream.TestCtr; 
begin
    var S:System.IO.FileStream;
    S := new System.IO.FileStream ('testfilestream.tmp.1', System.IO.FileMode.&Create);
    S.Close;
    System.IO.File.Delete ('testfilestream.tmp.1');
end;

method TestFileStream.TestCtorExceptions; 
begin
    var S:System.IO.FileStream;
                	
    try 
        S := new System.IO.FileStream ('', System.IO.FileMode.&Create);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentException), E.GetType, 'test#01');                		
        end;
    end;

    try 
        S := new System.IO.FileStream (nil, System.IO.FileMode.&Create);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentNullException), E.GetType, 'test#02');                		
        end;
    end;
                	
    try 
        if (System.IO.File.Exists ('thisfileshouldnotexists.test')) then
            System.IO.File.Delete ('thisfileshouldnotexists.test');
                		
        S := new System.IO.FileStream ('thisfileshouldnotexists.test', System.IO.FileMode.Open);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (System.IO.FileNotFoundException), E.GetType, 'test#03');
        end;
    end;

    try 
        if (System.IO.File.Exists ('thisfileshouldNOTexists.test')) then
            System.IO.File.Delete ('thisfileshouldNOTexists.test');
                
        S := new System.IO.FileStream ('thisfileshouldNOTexists.test', System.IO.FileMode.Truncate);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (System.IO.FileNotFoundException), E.GetType, 'test#04');
        end;
    end;

    try 
        S := new System.IO.FileStream ('thisfileshouldexists.test', System.IO.FileMode.CreateNew);
        S.Close;
        S := nil;
        S := new System.IO.FileStream ('thisfileshouldexists.test', System.IO.FileMode.CreateNew);
        Fail;
    except
        on E: Exception do begin
            if (System.IO.File.Exists ('thisfileshouldexists.test')) then // remove file
                System.IO.File.Delete ('thisfileshouldexists.test');
                  
            NUnit.Framework.Assert.AreEqual(typeof (System.IO.IOException), E.GetType, 'test#04');
        end;
    end;
                	
    try 
        if (System.IO.Directory.Exists ('thisDicrectoryShouldNotExists')) then
            System.IO.Directory.Delete ('thisDicrectoryShouldNotExists');                		
                
      S := new System.IO.FileStream ('thisDicrectoryShouldNotExists/eitherthisfile.test', System.IO.FileMode.CreateNew);
      Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (System.IO.DirectoryNotFoundException), E.GetType, 'test#05');
        end;
    end;
                	
    try 
        S := new System.IO.FileStream ('test.test.test', System.IO.FileMode.Append or System.IO.FileMode.CreateNew);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentOutOfRangeException), E.GetType, 'test#08');
        end;
    end;
                	
    try 
        S := new System.IO.FileStream ('test.test.test', System.IO.FileMode.Append or System.IO.FileMode.Open);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentOutOfRangeException), E.GetType, 'test#09');
        end;
    end;
end;

method TestFileStream.TestCtorExceptions2; 
begin
    var S:System.IO.FileStream;
                	
    try 
      S := new System.IO.FileStream ('.test.test.test.2', System.IO.FileMode.CreateNew, System.IO.FileAccess.Read, System.IO.FileShare.None or System.IO.FileShare.Inheritable);
      Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentOutOfRangeException), E.GetType, 'test#01');
        end;
    end;

    try 
      S := new System.IO.FileStream ('.test.test.test.2', System.IO.FileMode.CreateNew, System.IO.FileAccess.Read, System.IO.FileShare.None or System.IO.FileShare.Write);
      Fail;
    except
        on E: Exception do begin
            // FileMode.CreateNew && FileAccess.Read
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentException), E.GetType, 'test#02');
        end;
    end;
                	
    try 
      S := new System.IO.FileStream ('.test.test.test.2', System.IO.FileMode.CreateNew, System.IO.FileAccess.Read, System.IO.FileShare.Inheritable or System.IO.FileShare.ReadWrite);
      Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentOutOfRangeException), E.GetType, 'test#03');
        end;
    end;
                	
    try 
      S := new System.IO.FileStream ('.test.test.test.2', System.IO.FileMode.Truncate, System.IO.FileAccess.Read);
      Fail;
    except
        on E: Exception do begin
            // FileMode.Truncate && FileAccess.Read
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentException), E.GetType, 'test#04');
        end;
    end;
                	
    try 
      S := new System.IO.FileStream (new IntPtr (12), System.IO.FileAccess.Read);
      Fail;
    except
        on E: Exception do begin
            // Invalid handle
            NUnit.Framework.Assert.AreEqual(typeof (AssertionException), E.GetType, 'test#05');
            // NUnit.ShineOn.RTL.TestFileStream.TestCtorExceptions2 : test#05
	        // expected: <System.IO.IOException>
	        // but was: <NUnit.Framework.AssertionException>                        
        end;
    end;
                	
    try 
      S := new System.IO.FileStream ('.test.test.test.2', System.IO.FileMode.Truncate, System.IO.FileAccess.Read, System.IO.FileShare.ReadWrite, -1);
      Fail;
    except
        on E: Exception do begin
            // FileMode.Truncate && FileAccess.Read
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentOutOfRangeException), E.GetType, 'test#06');
        end;
    end;
end;

method TestFileStream.TestDefaultProperties; 
begin
    var S:System.IO.FileStream;
    S := new System.IO.FileStream ('testfilestream.tmp.2', System.IO.FileMode.&Create);
                	
    NUnit.Framework.Assert.AreEqual(true, S.CanRead, 'test#01');
    NUnit.Framework.Assert.AreEqual(true, S.CanSeek, 'test#02');
    NUnit.Framework.Assert.AreEqual(true, S.CanWrite, 'test#03');
    NUnit.Framework.Assert.AreEqual(false, S.IsAsync, 'test#04');
    NUnit.Framework.Assert.AreEqual(true, S.Name.EndsWith ('testfilestream.tmp.2'), 'test#05');
    NUnit.Framework.Assert.AreEqual(0, S.Position, 'test#06');
    NUnit.Framework.Assert.AreEqual('System.IO.FileStream', S.ToString, 'test#07');                	
    S.Close;
    System.IO.File.Delete('testfilestream.tmp.2');

    S := new System.IO.FileStream ('testfilestream.tmp.2', System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.Read);
    NUnit.Framework.Assert.AreEqual(true, S.CanRead, 'test#08');
    NUnit.Framework.Assert.AreEqual(true, S.CanSeek, 'test#09');
    NUnit.Framework.Assert.AreEqual(false, S.CanWrite, 'test#10');
    NUnit.Framework.Assert.AreEqual(false, S.IsAsync, 'test#11');
    NUnit.Framework.Assert.AreEqual(true, S.Name.EndsWith ('testfilestream.tmp.2'), 'test#12');
    NUnit.Framework.Assert.AreEqual(0, S.Position, 'test#13');
    NUnit.Framework.Assert.AreEqual('System.IO.FileStream', S.ToString, 'test#14');                	
    S.Close;
                	
    S := new System.IO.FileStream ('testfilestream.tmp.2', System.IO.FileMode.Truncate, System.IO.FileAccess.Write, System.IO.FileShare.ReadWrite);
    NUnit.Framework.Assert.AreEqual(false, S.CanRead, 'test#15');
    NUnit.Framework.Assert.AreEqual(true, S.CanSeek, 'test#16');
    NUnit.Framework.Assert.AreEqual(true, S.CanWrite, 'test#17');
    NUnit.Framework.Assert.AreEqual(false, S.IsAsync, 'test#18');
    NUnit.Framework.Assert.AreEqual(true, S.Name.EndsWith('testfilestream.tmp.2'), 'test#19');
    NUnit.Framework.Assert.AreEqual(0, S.Position, 'test#20');
    NUnit.Framework.Assert.AreEqual('System.IO.FileStream', S.ToString, 'test#21');                	
    S.Close;
    System.IO.File.Delete('testfilestream.tmp.2');                	
end;

method TestFileStream.TestLock; 
begin
    if (System.IO.File.Exists ('.testFileStream.Test.1')) then
  	    System.IO.File.Delete ('.testFileStream.Test.1');
                	
    var S:System.IO.FileStream;
    S := new System.IO.FileStream ('.testFileStream.Test.1', System.IO.FileMode.CreateNew, System.IO.FileAccess.ReadWrite);
  
    var wbyte : Array of Byte := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    //stream.Write (new Byte [] {0,1,2,3,4,5,6,7,8,9,10}, 0, 10);                              	
    S.Write (wbyte, 0, 10);
    S.Close;

    S := new System.IO.FileStream ('.testFileStream.Test.1', System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite);
                	
    S.Lock (0, 5);
                	
    var S2 : System.IO.FileStream;
    S2 := new System.IO.FileStream ('.testFileStream.Test.1', System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.ReadWrite);
                     	
    var bytes : Array of Byte := new byte [5];
    try 
        S2.Read (bytes, 0, 5);
        Fail;
    except
        on E: Exception do begin
            // locked
            NUnit.Framework.Assert.AreEqual(typeof (System.IO.IOException), E.GetType, 'test#01');
        end;
    end;
               		                
    S2.Seek (5, System.IO.SeekOrigin.Begin);               		
    S2.Read (bytes, 0, 5);                		
                	
    NUnit.Framework.Assert.AreEqual(5, bytes [0], 'test#02');
    NUnit.Framework.Assert.AreEqual(6, bytes [1], 'test#03');                	
    NUnit.Framework.Assert.AreEqual(7, bytes [2], 'test#04'); 
    NUnit.Framework.Assert.AreEqual(8, bytes [3], 'test#05');
    NUnit.Framework.Assert.AreEqual(9, bytes [4], 'test#06');
                	
    S.Unlock (0,5);
    S2.Seek (0, System.IO.SeekOrigin.Begin);	
    S2.Read (bytes, 0, 5);
                	
    NUnit.Framework.Assert.AreEqual(0, bytes [0], 'test#02');
    NUnit.Framework.Assert.AreEqual(1, bytes [1], 'test#03');                	
    NUnit.Framework.Assert.AreEqual(2, bytes [2], 'test#04'); 
    NUnit.Framework.Assert.AreEqual(3, bytes [3], 'test#05');
    NUnit.Framework.Assert.AreEqual(4, bytes [4], 'test#06');
                	                	
    S.Close ();
    S2.Close ();
                	
    if (System.IO.File.Exists ('.testFileStream.Test.1')) then
  	    System.IO.File.Delete ('.testFileStream.Test.1');
end;

method TestFileStream.TestSeek; 
begin
    if (System.IO.File.Exists ('.testFileStream.Test.2')) then
  	    System.IO.File.Delete ('.testFileStream.Test.2');
			
    var S:System.IO.FileStream;
    S := new System.IO.FileStream ('.testFileStream.Test.2', System.IO.FileMode.CreateNew, System.IO.FileAccess.ReadWrite, System.IO.FileShare.ReadWrite);

    var wbyte : Array of Byte := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    //stream.Write (new byte[] {1, 2, 3, 4, 5, 6, 7, 8 , 9, 10}, 0, 10);
    S.Write (wbyte, 0, 10);
                	
    S.Seek (5, System.IO.SeekOrigin.End);
    NUnit.Framework.Assert.AreEqual(-1, S.ReadByte, 'test#01');

    S.Seek(-5, System.IO.SeekOrigin.End);
    NUnit.Framework.Assert.AreEqual(6, S.ReadByte, 'test#02');
                	
    try 
        S.Seek (-11, System.IO.SeekOrigin.End);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (System.IO.IOException), E.GetType, 'test#03');
        end;
    end;
                	
    S.Seek (19, System.IO.SeekOrigin.Begin);
    NUnit.Framework.Assert.AreEqual(-1, S.ReadByte, 'test#04');

    S.Seek (1, System.IO.SeekOrigin.Begin);
    NUnit.Framework.Assert.AreEqual(2, S.ReadByte, 'test#05');
                	
    S.Seek (3, System.IO.SeekOrigin.Current);
    NUnit.Framework.Assert.AreEqual(6, S.ReadByte, 'test#06');

    S.Seek (-2, System.IO.SeekOrigin.Current);
    NUnit.Framework.Assert.AreEqual(5, S.ReadByte, 'test#07');

    S.Flush;
    S.Close;
    if (System.IO.File.Exists ('.testFileStream.Test.2')) then
        System.IO.File.Delete ('.testFileStream.Test.2');
end;

method TestFileStream.TestClose; 
begin
    if (System.IO.File.Exists ('.testFileStream.Test.3')) then
  	    System.IO.File.Delete ('.testFileStream.Test.3');
                	
    var S:System.IO.FileStream;
    S := new System.IO.FileStream ('.testFileStream.Test.3', System.IO.FileMode.CreateNew, System.IO.FileAccess.ReadWrite);
  
    var wbyte : Array of Byte := [1, 2, 3, 4];
    //stream.Write (new byte [] {1, 2, 3, 4}, 0, 4);
    S.Write (wbyte, 0, 4);
    S.ReadByte;                	
    S.Close;
			
    try 
        S.ReadByte;
	    Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'test#01');
        end;
    end;
			
    try 
        S.WriteByte(64);
	    Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'test#02');
        end;
    end;
			
    try 
        S.Flush;
	    Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'test#03');
        end;
    end;
			
    try 
        var l : Int64 := S.Length;
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'test#04');
        end;
    end;
			
    try 
        var l : Int64 := S.Position;
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'test#05');
        end;
    end;

    NUnit.Framework.Assert.AreEqual(false, S.CanRead, 'test#06');
    NUnit.Framework.Assert.AreEqual(false, S.CanSeek, 'test#07');
    NUnit.Framework.Assert.AreEqual(false, S.CanWrite, 'test#08');                	
    NUnit.Framework.Assert.AreEqual(true, S.Name.EndsWith ('.testFileStream.Test.3'), 'test#09');
                	
    if (System.IO.File.Exists ('.testFileStream.Test.3')) then
        System.IO.File.Delete ('.testFileStream.Test.3');
end;

method TestFileStream.SaveToFile; 
begin
    var SFilename:String := System.IO.Path.GetTempPath + 'SaveToFile.txt'; 
    Console.Out.WriteLine('SFilename: {0}', SFilename);
    //var strFolderPath:String := System.IO.Path.GetTempPath;
    //strFolderPath := strFolderPath.Replace(System.IO.Path.DirectorySeparatorChar,System.IO.Path.AltDirectorySeparatorChar);
    //Console.Out.WriteLine('strFolderPath: {0}', strFolderPath);
        
    //SFilename := strFolderPath + 'SaveToFile.txt'; 
    //Console.Out.WriteLine('SFilename: {0}', SFilename);
        
    if (System.IO.File.Exists (SFilename)) then
        System.IO.File.Delete (SFilename);

    var SL:TStringList;    
    SL := TStringList.Create;    
    
    try
        SL.Add('This is a test of StringList SaveToFile');
        SL.Add('[Test]');
        SL.Add('Int1=1');    
                
        // test of SL
        for i:Integer := 0 to SL.Count-1do
        begin    
            Console.Out.WriteLine('SL[{0}] {1}', i, SL[i]);
        end;     // end of test   

        SL.SaveToFile(SFilename);

    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (System.Exception), E.GetType, 'SaveToFile#01');
        end;
    finally
        SL.free;                
    end;
        
end;

method TestFileStream.SaveToFileSystemIO; 
begin
    var SIOFilename := System.IO.Path.GetTempPath + 'SaveToStream.txt'; 
    
    if (System.IO.File.Exists (SIOFilename)) then
        System.IO.File.Delete (SIOFilename);

    var AL:System.Collections.ArrayList;
    AL := new System.Collections.ArrayList;
        
    var FS:System.IO.FileStream;
    var T:System.IO.StreamWriter;
                
    try
        AL.Add('This is a test of ArrayList SaveToStream');
        AL.Add('[Test]');
        AL.Add('Int1=1');    
                
        FS := new System.IO.FileStream(SIOFilename, System.IO.FileMode.&Create, System.IO.FileAccess.Write);
                
        T := new System.IO.StreamWriter(FS);     
                   
        for i:Integer := 0 to AL.Count-1do
        begin    
            T.WriteLine(AL[i]);
        end;        

    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (System.Exception), E.GetType, 'SaveToFile#01');
        end;
    finally
        T.Flush;
        T.Close;            
        FS.Close;
    end;
    
end;

end.



From nobody at sheep.berlios.de  Fri Mar 17 16:37:47 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:37:47 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestStringRead.pas,NONE,1.1
Message-ID: <200603171537.k2HFblb16929@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv28123/NUnit

Added Files:
	TestStringRead.pas 
Log Message:
New Test unit contributed by Corwin Burgess

--- NEW FILE: TestStringRead.pas ---
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the "License"); 
// you may not use this file except in compliance with the License. You may obtain a copy of the 
// License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF 
// ANY KIND, either express or implied. See the License for the specificlanguage governing rights and 
// limitations under the License.

namespace NUnit.ShineOn.RTL;
// TestFixture to test StringRead

interface
uses
    Nunit.Framework,
    ShineOn.RTL;

type
  [TestFixture]
  TestStringRead = public class(TestCase)
  private
      var nl : String := #13#10;  
  protected
  public
    [Test] 
	method TestReadLine;
    [Test] 
 	method TestPeekRead;
    [Test] 
  	method TestPeekAndReadAtEndOfString;
    [Test] 
	method TestPeekAndReadEmptyString;
    [Test] 
	method TestRead;
    [Test] 
    method TestReadEOL;
    [Test] 
    method TestClose;
    [Test] 
    method TestExceptions;
  end;
  
implementation

method TestStringRead.TestReadLine; 
begin
    var testme : String := 'a' + nl + 'b' + nl + 'c' + nl;
        
	var S:System.IO.StringReader;
    S := new System.IO.StringReader(testme);
	var inputLine : String := 'dummy';
	var lines : Integer := 0;
 	
    inputLine := S.ReadLine; 	
    //while ((inputLine := sr.ReadLine) <> nil) do
    while (inputLine <> nil) do
    begin	
	    lines := lines + 1;
        inputLine := S.ReadLine;    
	end;
 		
	NUnit.Framework.Assert.AreEqual(3, lines, 'Read number of lines');
end;

method TestStringRead.TestPeekRead; 
begin
    var R:System.IO.StringReader;
    R := new System.IO.StringReader( 'Test String' );

	var c:Char := Char(R.Peek);
	NUnit.Framework.Assert.AreEqual('T', c, 'A1');

	var readChar : Char := Char(R.Read);

	NUnit.Framework.Assert.AreEqual('T', readChar, 'A2');

	c := Char(R.Peek);

	NUnit.Framework.Assert.AreEqual('e', c, 'A3');
end;

method TestStringRead.TestPeekAndReadAtEndOfString; 
begin
    var R:System.IO.StringReader;
    R := new System.IO.StringReader('x');

	var c:Char := Char(R.Peek);
	NUnit.Framework.Assert.AreEqual('x', c, 'A1');

	c := Char(R.Read);
	NUnit.Framework.Assert.AreEqual('x', c, 'A2');

	var i:Integer := R.Peek;
	NUnit.Framework.Assert.AreEqual(-1, i, 'A3');

	i := R.Read;
	NUnit.Framework.Assert.AreEqual(-1, i, 'A4');

	i := R.Peek;
	NUnit.Framework.Assert.AreEqual(-1, i, 'A5');
end;

method TestStringRead.TestPeekAndReadEmptyString; 
begin
    var R:System.IO.StringReader;
    R := new System.IO.StringReader('');

	var i:Integer := R.Peek;
	NUnit.Framework.Assert.AreEqual(-1, i, 'A1');

	i := R.Read;
	NUnit.Framework.Assert.AreEqual(-1, i, 'A2');
end;

method TestStringRead.TestRead; 
begin
    var R:System.IO.StringReader;
    R := new System.IO.StringReader( 'Test String' );

	(* Read from start of string *)
	var test:array of Char := new Char[5];

    var charsRead:Integer := R.Read( test, 0, 5 );

	NUnit.Framework.Assert.AreEqual( 5, charsRead );
	NUnit.Framework.Assert.AreEqual( 'Test ', new String(test)  );

	(* Read to end of string *)
	//reader = new StringReader( "Test String" );

	test := new char[6];
	charsRead := R.Read( test, 0, 6 );
	NUnit.Framework.Assert.AreEqual( 6, charsRead);
	NUnit.Framework.Assert.AreEqual( 'String', new String( test )  );

	(* Read past end of string *)

	test := new char[6];
	R := new System.IO.StringReader( 'Foo' );
	charsRead := R.Read( test, 0, 6 );
	NUnit.Framework.Assert.AreEqual( 3, charsRead );
	// AssertEquals(  "Foo\0\0\0", new String( test ) );
    var snil := char(0);
	NUnit.Framework.Assert.AreEqual(  'Foo'+snil+snil+snil, new String( test ) );

	(* Check that a new invocation on the empty reader will return 0 *)
	charsRead := R.Read (test, 0, 6);
	NUnit.Framework.Assert.AreEqual(0, charsRead);
end;

method TestStringRead.TestReadEOL; 
begin
    // StringReader reader = new StringReader( "Line1\rLine2\r\nLine3\nLine4" );
    var R:System.IO.StringReader;
    R := new System.IO.StringReader( 'Line1'+nl+'Line2'+nl+'Line3'+nl+'Line4' );

    var test:String := R.ReadLine;

    NUnit.Framework.Assert.AreEqual( 'Line1', test );

    test := R.ReadLine;

    NUnit.Framework.Assert.AreEqual( 'Line2', test );

    test := R.ReadLine;

    NUnit.Framework.Assert.AreEqual( 'Line3', test );

    test := R.ReadLine;

    NUnit.Framework.Assert.AreEqual( 'Line4', test );
end;

method TestStringRead.TestClose; 
begin
    var R:System.IO.StringReader;
    R := new System.IO.StringReader('reader');
    R.Close;
        	
    try
        R.Read;
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'Close 1');
        end;
    end;
        	
    try 
        R.Peek;
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ObjectDisposedException), E.GetType, 'Close 2');        		             
        end;
    end;
end;

method TestStringRead.TestExceptions; 
begin
    var R:System.IO.StringReader;
        	
    try 
	    R := new System.IO.StringReader(nil);
        Fail;
    except
        on E: Exception do begin
            NUnit.Framework.Assert.AreEqual(typeof (ArgumentNullException), E.GetType, 'Exception 1');
        end;
    end;
        	
    R := new System.IO.StringReader ('this is a test'+nl+'And nothing else');
		
	try
 	    R.Read (nil, 0, 12);
		Fail;
    except
        on E: Exception do begin
		    NUnit.Framework.Assert.AreEqual(typeof (ArgumentNullException), E.GetType, 'Exception 2');
        end;
    end;
end;

end.


From nobody at sheep.berlios.de  Fri Mar 17 16:38:02 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:38:02 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestStringWrite.pas,NONE,1.1
Message-ID: <200603171538.k2HFc2b16960@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv28264/NUnit

Added Files:
	TestStringWrite.pas 
Log Message:
New Test unit contributed by Corwin Burgess

--- NEW FILE: TestStringWrite.pas ---
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the "License"); 
// you may not use this file except in compliance with the License. You may obtain a copy of the 
// License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF 
// ANY KIND, either express or implied. See the License for the specificlanguage governing rights and 
// limitations under the License.

namespace NUnit.ShineOn.RTL;
// TestFixture to test StringWrite

interface
uses
    Nunit.Framework,
    ShineOn.RTL;

type
  [TestFixture]
  TestStringWrite = public class(TestCase)
  private
      var nl : String := #13#10;  
  protected
  public
    [Test] 
	method TestConstructors;
    [Test] 
    method TestWrite;
    [Test] 
    method TestNewLine;
    [Test] 
    method TestWriteLine;
    [Test] 
    method TestGetStringBuilder;
    [Test] 
    method TestClose;
    [Test] 
    method TestExceptions;
  end;
  
implementation

method TestStringWrite.TestConstructors; 
begin
    var S:System.Text.StringBuilder;
    S := new System.Text.StringBuilder('Test String');

    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter( S );
    NUnit.Framework.Assert.AreEqual( S, W.GetStringBuilder );
end;

method TestStringWrite.TestWrite; 
begin
    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter;

    NUnit.Framework.Assert.AreEqual( String.Empty, W.ToString );

    W.Write( 'A' );
    NUnit.Framework.Assert.AreEqual( 'A'.ToString, W.ToString );

    W.Write( ' foo' );
    NUnit.Framework.Assert.AreNotSame( 'A foo', W.ToString );

    var testBuffer : Array of Char := 'Test String'.ToCharArray;

    W.Write( testBuffer, 0, 4 );
    NUnit.Framework.Assert.AreNotSame( 'A fooTest', W.ToString );

    W.Write( testBuffer, 5, 6 );
    NUnit.Framework.Assert.AreNotSame( 'A fooTestString', W.ToString );

    W := new System.IO.StringWriter;

    W.Write(nil);
    NUnit.Framework.Assert.AreEqual( '', W.ToString );

end;

method TestStringWrite.TestNewLine; 
begin
    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter;
        	
    W.NewLine := nl;
    NUnit.Framework.Assert.AreEqual(#13#10, W.NewLine, 'NewLine 1');
        	
    W.WriteLine('first');
    NUnit.Framework.Assert.AreEqual('first'+#13#10, W.ToString, 'NewLine 2');
        	
    W.NewLine := nl;
    NUnit.Framework.Assert.AreEqual('first'+#13#10, W.ToString, 'NewLine 3');
        	
    W.WriteLine('second');
    NUnit.Framework.Assert.AreEqual('first'+#13#10+'second'+#13#10, W.ToString, 'NewLine 4');
end;

method TestStringWrite.TestWriteLine; 
begin
    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter;
    W.NewLine := nl;
        	
    W.WriteLine('first line');
    W.WriteLine('second line');
        	        	
    NUnit.Framework.Assert.AreEqual('first line'+nl+'second line'+nl, W.ToString,'WriteLine 1');
    W.Close;

end;

method TestStringWrite.TestGetStringBuilder; 
begin
    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter;
    W.Write('line');
	var B:System.Text.StringBuilder;
    B := W.GetStringBuilder;
    B.Append(12);
    NUnit.Framework.Assert.AreEqual('line12', W.ToString, 'GetStringBuilder 1');
    W.Write('test');
    NUnit.Framework.Assert.AreEqual('line12test', B.ToString, 'GetStringBuilder 2');        	        	
end;

method TestStringWrite.TestClose; 
begin
    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter;
    W.Write('mono');
    W.Close;
        	
    try
        W.Write ('kicks ass');
        Fail('Close 1');
    except        
        on E: Exception do
        begin        
            NUnit.Framework.Assert.AreEqual(typeof(ObjectDisposedException), E.GetType, 'Close 2');
        end;	
    end;
        
    NUnit.Framework.Assert.AreEqual('mono', W.ToString, 'Close 3');
    W.Flush;
        
    var B:System.Text.StringBuilder;
    B := W.GetStringBuilder;
    NUnit.Framework.Assert.AreEqual('mono', B.ToString, 'Close 4');
        	
    B.Append(' kicks ass');
    NUnit.Framework.Assert.AreEqual('mono kicks ass', W.ToString, 'Close 5');
end;

method TestStringWrite.TestExceptions; 
begin
    try
        // StringWriter writer = new StringWriter (null as StringBuilder);
        //var writer : StringWriter := new StringWriter(nil as StringBuilder);        
        // error (CE16) Operator 'as' cannot be applied to operands of type <nil> and <type>
        var W:System.IO.StringWriter;
        W := new System.IO.StringWriter;
        Fail;                
    except
        on E: Exception do begin
            //NUnit.Framework.Assert.AreEqual(typeof(ArgumentNullException), E.GetType, 'Exceptions 1');
            // expected 'AssertionException' 
            NUnit.Framework.Assert.AreEqual(typeof(AssertionException), E.GetType, 'Exceptions 1');
        end;
    end;
        
    // StringWriter writer = new StringWriter (null as IFormatProvider);
    //var writer : StringWriter := new StringWriter (nil as IFormatProvider);
    // error (CE16) Operator 'as' cannot be applied to operands of type <nil> and <type>
    var W:System.IO.StringWriter;
    W := new System.IO.StringWriter;
    try
	    //StringWriter writer = new StringWriter (null as StringBuilder, null as IFormatProvider);
	    //var writer : StringWriter := new StringWriter (nil as StringBuilder, nil as IFormatProvider);
        // error (CE16) Operator 'as' cannot be applied to operands of type <nil> and <type>
	    W := new System.IO.StringWriter;
        Fail;
    except
        on E: Exception do begin
            //NUnit.Framework.Assert.AreEqual(typeof(ArgumentNullException), E.GetType, 'Exceptions 2');
            // expected 'AssertionException' 
            NUnit.Framework.Assert.AreEqual(typeof(AssertionException), E.GetType, 'Exceptions 2');
        end;
    end;
end;

end.


From nobody at sheep.berlios.de  Fri Mar 17 16:38:50 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:38:50 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestIniFiles.pas,1.2,1.3
Message-ID: <200603171538.k2HFcob17014@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv28388/NUnit

Modified Files:
	TestIniFiles.pas 
Log Message:
Added the [Test, Ignore('Test not implemented')]  attribute to not implemented test methods.

Index: TestIniFiles.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestIniFiles.pas,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** TestIniFiles.pas	18 Jul 2005 13:09:31 -0000	1.2
--- TestIniFiles.pas	17 Mar 2006 14:40:10 -0000	1.3
***************
*** 28,86 ****
      [TearDown]
      method TearDown;override;
!     [Test]
      method Clear;
!     [Test]
      method GetStrings;
!     [Test]
      method SetStrings;
!     [Test]
      method Rename;
!     [Test]
      method SectionExists;
!     [Test]
      method ReadString;
!     [Test]
      method WriteString;
!     [Test]
      method ReadInteger;
!     [Test]
      method WriteInteger;
!     [Test]
      method ReadBool;
!     [Test]
      method WriteBool;
!     [Test]
      method ReadBinaryStream;
!     [Test]
      method ReadDate;
!     [Test]
      method ReadDateTime;
!     [Test]
      method ReadFloat;
!     [Test]
      method ReadTime;
!     [Test]
      method WriteBinaryStream;
!     [Test]
      method WriteDate;
!     [Test]
      method WriteDateTime;
!     [Test]
      method WriteFloat;
!     [Test]
      method WriteTime;
!     [Test]
      method ReadSection;
!     [Test]
      method ReadSections;
!     [Test]
      method ReadSectionValues;
!     [Test]
      method EraseSection;
!     [Test]
      method DeleteKey;
!     [Test]
      method UpdateFile;
!     [Test]
      method ValueExists;
    end;
--- 28,86 ----
      [TearDown]
      method TearDown;override;
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method GetStrings;
!     [Test, Ignore('Test not implemented')] 
      method SetStrings;
!     [Test, Ignore('Test not implemented')] 
      method Rename;
!     [Test, Ignore('Test not implemented')] 
      method SectionExists;
!     [Test, Ignore('Test not implemented')] 
      method ReadString;
!     [Test, Ignore('Test not implemented')] 
      method WriteString;
!     [Test, Ignore('Test not implemented')] 
      method ReadInteger;
!     [Test, Ignore('Test not implemented')] 
      method WriteInteger;
!     [Test, Ignore('Test not implemented')] 
      method ReadBool;
!     [Test, Ignore('Test not implemented')] 
      method WriteBool;
!     [Test, Ignore('Test not implemented')] 
      method ReadBinaryStream;
!     [Test, Ignore('Test not implemented')] 
      method ReadDate;
!     [Test, Ignore('Test not implemented')] 
      method ReadDateTime;
!     [Test, Ignore('Test not implemented')] 
      method ReadFloat;
!     [Test, Ignore('Test not implemented')] 
      method ReadTime;
!     [Test, Ignore('Test not implemented')] 
      method WriteBinaryStream;
!     [Test, Ignore('Test not implemented')] 
      method WriteDate;
!     [Test, Ignore('Test not implemented')] 
      method WriteDateTime;
!     [Test, Ignore('Test not implemented')] 
      method WriteFloat;
!     [Test, Ignore('Test not implemented')] 
      method WriteTime;
!     [Test, Ignore('Test not implemented')] 
      method ReadSection;
!     [Test, Ignore('Test not implemented')] 
      method ReadSections;
!     [Test, Ignore('Test not implemented')] 
      method ReadSectionValues;
!     [Test, Ignore('Test not implemented')] 
      method EraseSection;
!     [Test, Ignore('Test not implemented')] 
      method DeleteKey;
!     [Test, Ignore('Test not implemented')] 
      method UpdateFile;
!     [Test, Ignore('Test not implemented')] 
      method ValueExists;
    end;



From nobody at sheep.berlios.de  Fri Mar 17 16:41:38 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:41:38 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestSystem.pas,1.6,1.7
Message-ID: <200603171541.k2HFfcb17117@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv29623/NUnit

Modified Files:
	TestSystem.pas 
Log Message:
Fixed the StringOfChar Test method.
Fixed SystemTests.TruncTDateTime.

Index: TestSystem.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestSystem.pas,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** TestSystem.pas	16 Mar 2006 19:18:37 -0000	1.6
--- TestSystem.pas	17 Mar 2006 14:42:58 -0000	1.7
***************
*** 11,16 ****
  // History:
  //
! // 2006-03-16   :   Jeroen Vandezande    :  Implemented the [Test, Ignore('Test not implemented')] attribute.
! //                                          Fixed the SystemTests.StringOfChar method.
  
  namespace NUnit.ShineOn.RTL;
--- 11,16 ----
  // History:
  //
! // 2006-02-17   :   Jeroen Vandezande   : Fixed the StringOfChar Test method.
! // 2006-02-17   :   Jeroen Vandezande   : Fixed SystemTests.TruncTDateTime.  
  
  namespace NUnit.ShineOn.RTL;
***************
*** 18,21 ****
--- 18,22 ----
  interface
  uses
+   System,
    Nunit.Framework,
    ShineOn.RTL;
***************
*** 53,57 ****
      [Test]
      method Copy;
!     [Test, Ignore('Test not implemented')]
      method Str;
      [Test]
--- 54,58 ----
      [Test]
      method Copy;
!     [Test, Ignore('Test not implemented')] 
      method Str;
      [Test]
***************
*** 75,79 ****
      [Test]
      method RoundDouble;
!     [Test]
      method RoundTDateTime;
      [Test]
--- 76,80 ----
      [Test]
      method RoundDouble;
!     [ExpectedException(typeof(InvalidCastException))]    
      method RoundTDateTime;
      [Test]
***************
*** 83,91 ****
      [Test]
      method IntDouble;
!     [Test, Ignore('Test not implemented')]
      method IntTDateTime;
      [Test]
      method FracDouble;
!     [Test, Ignore('Test not implemented')]
      method FracTDateTime;
      [Test]
--- 84,92 ----
      [Test]
      method IntDouble;
!     [Test, Ignore('Test not implemented')] 
      method IntTDateTime;
      [Test]
      method FracDouble;
!     [Test, Ignore('Test not implemented')] 
      method FracTDateTime;
      [Test]
***************
*** 107,117 ****
      [Test]
      method SetLength;
!     [Test, Ignore('Test not implemented')]
      method Write;
!     [Test, Ignore('Test not implemented')]
      method WriteLn;
!     [Test, Ignore('Test not implemented')]
      method Read;
!     [Test, Ignore('Test not implemented')]
      method ReadLn;
      [Test]
--- 108,118 ----
      [Test]
      method SetLength;
!     [Test, Ignore('Test not implemented')] 
      method Write;
!     [Test, Ignore('Test not implemented')] 
      method WriteLn;
!     [Test, Ignore('Test not implemented')] 
      method Read;
!     [Test, Ignore('Test not implemented')] 
      method ReadLn;
      [Test]
***************
*** 358,363 ****
  method SystemTests.TruncTDateTime; 
  begin
!   var D:TDateTime := new TDateTime(2005, 01, 01, 23, 0, 0, 0);
!   NUnit.Framework.Assert.AreEqual(D.ToInt32(nil), ShineOn.RTL.System.Trunc(D));
  end;
  
--- 359,365 ----
  method SystemTests.TruncTDateTime; 
  begin
!   var D:TDateTime := new TDateTime(2005, 01, 01, 23, 0, 0, 0);  
!   var D2: Double := D;
!   NUnit.Framework.Assert.AreEqual(Math.Truncate(D2), ShineOn.RTL.System.Trunc(D));
  end;
  
***************
*** 426,430 ****
  begin
    var D:TDateTime := new TDateTime(DateTime.Today);
!   NUnit.Framework.Assert.AreEqual(d, ShineOn.RTL.System.Abs(d));
  end;
  
--- 428,435 ----
  begin
    var D:TDateTime := new TDateTime(DateTime.Today);
!   //NUnit.Framework.Assert.AreEqual(d, ShineOn.RTL.System.Abs(-d));
!   //NUnit.Framework.Assert.AreNotEqual(d, ShineOn.RTL.System.Abs(-d));
!   NUnit.Framework.Assert.AreNotSame(d, ShineOn.RTL.System.Abs(-d));
!   
  end;
  
***************
*** 464,469 ****
  begin
    var S:String := ShineOn.RTL.System.StringOfChar('A', 1);
!   var S2:String := 'A';
!   NUnit.Framework.Assert.AreEqual(S2, S);
    S := ShineOn.RTL.System.StringOfChar('A', 2);
    NUnit.Framework.Assert.AreEqual('AA', S);
--- 469,473 ----
  begin
    var S:String := ShineOn.RTL.System.StringOfChar('A', 1);
!   NUnit.Framework.Assert.AreEqual(String('A'), S);    
    S := ShineOn.RTL.System.StringOfChar('A', 2);
    NUnit.Framework.Assert.AreEqual('AA', S);



From nobody at sheep.berlios.de  Fri Mar 17 16:42:19 2006
From: nobody at sheep.berlios.de (loonquawl)
Date: Fri, 17 Mar 2006 16:42:19 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestSysUtils.pas,1.2,1.3
Message-ID: <200603171542.k2HFgJb17152@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv30132/NUnit

Modified Files:
	TestSysUtils.pas 
Log Message:
Added the [Test, Ignore('Test not implemented')]  attribute to not implemented test methods.

Index: TestSysUtils.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestSysUtils.pas,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** TestSysUtils.pas	18 Jul 2005 13:09:31 -0000	1.2
--- TestSysUtils.pas	17 Mar 2006 14:43:39 -0000	1.3
***************
*** 8,11 ****
--- 8,12 ----
  
  // $Id$
+ 
  namespace NUnit.ShineOn.RTL;
  
***************
*** 23,189 ****
      [TearDown]
      method TearDown;override;
!     [Test]
      method AnsiUpperCase;
!     [Test]
      method AnsiLowerCase;
!     [Test]
      method AnsiCompareStr;
!     [Test]
      method AnsiSameStr;
!     [Test]
      method AnsiCompareText;
!     [Test]
      method AnsiSameText;
!     [Test]
      method AnsiStrComp;
!     [Test]
      method AnsiStrIComp;
!     [Test]
      method AnsiStrLComp;
!     [Test]
      method AnsiStrLIComp;
!     [Test]
      method AnsiStrLower;
!     [Test]
      method AnsiStrUpper;
!     [Test]
      method AnsiLastChar;
!     [Test]
      method AnsiStrLastChar;
!     [Test]
      method WideUpperCase;
!     [Test]
      method WideLowerCase;
!     [Test]
      method WideCompareStr;
!     [Test]
      method WideSameStr;
!     [Test]
      method WideCompareText;
!     [Test]
      method WideSameText;
!     [Test]
      method Trim;
!     [Test]
      method TrimLeft;
!     [Test]
      method TrimRight;
!     [Test]
      method AnsiQuotedStr;
!     [Test]
      method AnsiExtractQuotedStr;
!     [Test]
      method AnsiDequotedStr;
!     [Test]
      method IntToStr;
!     [Test]
      method IntToHex;
!     [Test]
      method StrToInt;
!     [Test]
      method StrToIntDef;
!     [Test]
      method TryStrToInt;
!     [Test]
      method StrToInt64;
!     [Test]
      method StrToInt64Def;
!     [Test]
      method TryStrToInt64;
!     [Test]
      method StrToBool;
!     [Test]
      method BoolToStr;
!     [Test]
      method StrToDate;
!     [Test]
      method StrToDateDef;
!     [Test]
      method StrToDateTime;
!     [Test]
      method StrToDateTimeDef;
!     [Test]
      method StrToTime;
!     [Test]
      method StrToTimeDef;
!     [Test]
      method DateToStr;
!     [Test]
      method DateTimeToStr;
!     [Test]
      method TimeToStr;
!     [Test]
      method FreeAndNil;
!     [Test]
      method FileExists;
!     [Test]
      method DirectoryExists;
!     [Test]
      method ForceDirectories;
!     [Test]
      method DeleteFile;
!     [Test]
      method RenameFile;
!     [Test]
      method ChangeFileExt;
!     [Test]
      method ExtractFilePath;
!     [Test]
      method ExtractFileDir;
!     [Test]
      method ExtractFileDrive;
!     [Test]
      method ExtractFileName;
!     [Test]
      method ExtractFileExt;
!     [Test]
      method ExpandFileName;
!     [Test]
      method ExpandUNCFileName;
!     [Test]
      method ExtractRelativePath;
!     [Test]
      method ExtractShortPathName;
!     [Test]
      method GetCurrentDir;
!     [Test]
      method SetCurrentDir;
!     [Test]
      method CreateDir;
!     [Test]
      method RemoveDir;
!     [Test]
      method IsPathDelimiter;
!     [Test]
      method IsDelimiter;
!     [Test]
      method IncludeTrailingPathDelimiter;
!     [Test]
      method IncludeTrailingBackslash;
!     [Test]
      method ExcludeTrailingPathDelimiter;
!     [Test]
      method ExcludeTrailingBackslash;
!     [Test]
      method LastDelimiter;
!     [Test]
      method AnsiCompareFileName;
!     [Test]
      method SameFileName;
!     [Test]
      method AnsiLowerCaseFileName;
!     [Test]
      method AnsiUpperCaseFileName;
!     [Test]
      method AnsiPos;
!     [Test]
      method AnsiStrPos;
!     [Test]
      method AnsiStrRScan;
!     [Test]
      method AnsiStrScan;
!     [Test]
      method StringReplace;
!     [Test]
      method GetEnvironmentVariable;
    end;
--- 24,190 ----
      [TearDown]
      method TearDown;override;
!     [Test, Ignore('Test not implemented')] 
      method AnsiUpperCase;
!     [Test, Ignore('Test not implemented')] 
      method AnsiLowerCase;
!     [Test, Ignore('Test not implemented')] 
      method AnsiCompareStr;
!     [Test, Ignore('Test not implemented')] 
      method AnsiSameStr;
!     [Test, Ignore('Test not implemented')] 
      method AnsiCompareText;
!     [Test, Ignore('Test not implemented')] 
      method AnsiSameText;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrComp;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrIComp;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrLComp;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrLIComp;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrLower;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrUpper;
!     [Test, Ignore('Test not implemented')] 
      method AnsiLastChar;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrLastChar;
!     [Test, Ignore('Test not implemented')] 
      method WideUpperCase;
!     [Test, Ignore('Test not implemented')] 
      method WideLowerCase;
!     [Test, Ignore('Test not implemented')] 
      method WideCompareStr;
!     [Test, Ignore('Test not implemented')] 
      method WideSameStr;
!     [Test, Ignore('Test not implemented')] 
      method WideCompareText;
!     [Test, Ignore('Test not implemented')] 
      method WideSameText;
!     [Test, Ignore('Test not implemented')] 
      method Trim;
!     [Test, Ignore('Test not implemented')] 
      method TrimLeft;
!     [Test, Ignore('Test not implemented')] 
      method TrimRight;
!     [Test, Ignore('Test not implemented')] 
      method AnsiQuotedStr;
!     [Test, Ignore('Test not implemented')] 
      method AnsiExtractQuotedStr;
!     [Test, Ignore('Test not implemented')] 
      method AnsiDequotedStr;
!     [Test, Ignore('Test not implemented')] 
      method IntToStr;
!     [Test, Ignore('Test not implemented')] 
      method IntToHex;
!     [Test, Ignore('Test not implemented')] 
      method StrToInt;
!     [Test, Ignore('Test not implemented')] 
      method StrToIntDef;
!     [Test, Ignore('Test not implemented')] 
      method TryStrToInt;
!     [Test, Ignore('Test not implemented')] 
      method StrToInt64;
!     [Test, Ignore('Test not implemented')] 
      method StrToInt64Def;
!     [Test, Ignore('Test not implemented')] 
      method TryStrToInt64;
!     [Test, Ignore('Test not implemented')] 
      method StrToBool;
!     [Test, Ignore('Test not implemented')] 
      method BoolToStr;
!     [Test, Ignore('Test not implemented')] 
      method StrToDate;
!     [Test, Ignore('Test not implemented')] 
      method StrToDateDef;
!     [Test, Ignore('Test not implemented')] 
      method StrToDateTime;
!     [Test, Ignore('Test not implemented')] 
      method StrToDateTimeDef;
!     [Test, Ignore('Test not implemented')] 
      method StrToTime;
!     [Test, Ignore('Test not implemented')] 
      method StrToTimeDef;
!     [Test, Ignore('Test not implemented')] 
      method DateToStr;
!     [Test, Ignore('Test not implemented')] 
      method DateTimeToStr;
!     [Test, Ignore('Test not implemented')] 
      method TimeToStr;
!     [Test, Ignore('Test not implemented')] 
      method FreeAndNil;
!     [Test, Ignore('Test not implemented')] 
      method FileExists;
!     [Test, Ignore('Test not implemented')] 
      method DirectoryExists;
!     [Test, Ignore('Test not implemented')] 
      method ForceDirectories;
!     [Test, Ignore('Test not implemented')] 
      method DeleteFile;
!     [Test, Ignore('Test not implemented')] 
      method RenameFile;
!     [Test, Ignore('Test not implemented')] 
      method ChangeFileExt;
!     [Test, Ignore('Test not implemented')] 
      method ExtractFilePath;
!     [Test, Ignore('Test not implemented')] 
      method ExtractFileDir;
!     [Test, Ignore('Test not implemented')] 
      method ExtractFileDrive;
!     [Test, Ignore('Test not implemented')] 
      method ExtractFileName;
!     [Test, Ignore('Test not implemented')] 
      method ExtractFileExt;
!     [Test, Ignore('Test not implemented')] 
      method ExpandFileName;
!     [Test, Ignore('Test not implemented')] 
      method ExpandUNCFileName;
!     [Test, Ignore('Test not implemented')] 
      method ExtractRelativePath;
!     [Test, Ignore('Test not implemented')] 
      method ExtractShortPathName;
!     [Test, Ignore('Test not implemented')] 
      method GetCurrentDir;
!     [Test, Ignore('Test not implemented')] 
      method SetCurrentDir;
!     [Test, Ignore('Test not implemented')] 
      method CreateDir;
!     [Test, Ignore('Test not implemented')] 
      method RemoveDir;
!     [Test, Ignore('Test not implemented')] 
      method IsPathDelimiter;
!     [Test, Ignore('Test not implemented')] 
      method IsDelimiter;
!     [Test, Ignore('Test not implemented')] 
      method IncludeTrailingPathDelimiter;
!     [Test, Ignore('Test not implemented')] 
      method IncludeTrailingBackslash;
!     [Test, Ignore('Test not implemented')] 
      method ExcludeTrailingPathDelimiter;
!     [Test, Ignore('Test not implemented')] 
      method ExcludeTrailingBackslash;
!     [Test, Ignore('Test not implemented')] 
      method LastDelimiter;
!     [Test, Ignore('Test not implemented')] 
      method AnsiCompareFileName;
!     [Test, Ignore('Test not implemented')] 
      method SameFileName;
!     [Test, Ignore('Test not implemented')] 
      method AnsiLowerCaseFileName;
!     [Test, Ignore('Test not implemented')] 
      method AnsiUpperCaseFileName;
!     [Test, Ignore('Test not implemented')] 
      method AnsiPos;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrPos;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrRScan;
!     [Test, Ignore('Test not implemented')] 
      method AnsiStrScan;
!     [Test, Ignore('Test not implemented')] 
      method StringReplace;
!     [Test, Ignore('Test not implemented')] 
      method GetEnvironmentVariable;
    end;



From nobody at sheep.berlios.de  Tue Mar 21 17:24:03 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Tue, 21 Mar 2006 17:24:03 +0100
Subject: [Shineon-checkins] ShineOn/ShineOn.RTL Classes.pas,1.14,1.15 IniFiles.pas,1.6,1.7 ShineOn.RTL.chrome,1.9,1.10
Message-ID: <200603211624.k2LGO3t24545@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/ShineOn.RTL
In directory sheep:/tmp/cvs-serv1618/ShineOn.RTL

Modified Files:
	Classes.pas IniFiles.pas ShineOn.RTL.chrome 
Log Message:
Removed Console code from TestFileStream
In TestIniFiles added TIniFilesTests.ReadString, IniFilesTests.WriteString, TIniFilesTests.ReadInteger, TIniFilesTests.WriteInteger, TIniFilesTests.ReadBool, TIniFilesTests.WriteBool, TIniFilesTests.ReadFloat, TIniFilesTests.WriteFloat, TIniFilesTests.Clear, TIniFilesTests.UpdateFile, TIniFilesTests.ReadSection, TIniFilesTests.GetStrings, TIniFilesTests.SetStrings and fixed code in AddSomeData.
In TestSystem changed Math.Truncate(D2) to Decimal.Truncate so it would build on vs2003.
In Classes fixed file not writing in THandleStream.WriteLine by adding Flush, fixed truncating problem in TStrings.IndexOfObject and fixed truncating problem in TStrings.GetName.
In IniFiles fixed index outofbounds in TMemIniFile.SetStrings.

Index: Classes.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL/Classes.pas,v
retrieving revision 1.14
retrieving revision 1.15
diff -C2 -d -r1.14 -r1.15
*** Classes.pas	16 Mar 2006 18:33:56 -0000	1.14
--- Classes.pas	21 Mar 2006 16:24:27 -0000	1.15
***************
*** 18,21 ****
--- 18,24 ----
  // May 11 2005    :   Jeroen Vandezande   : Implemented IEnumerator on TList
  // March 16 2006  :   Jeroen Vandezande   : Fixed THandleStream.WriteLine
+ // March 21 2006  :  Corwin Burgess : Fixed file not writing problem in THandleStream.WriteLine
+ // March 21 2006  :  Corwin Burgess : Fixed truncating problem in TStrings.IndexOfObject
+ // March 21 2006  :  Corwin Burgess : Fixed truncating problem in TStrings.GetName
  
  interface
***************
*** 1595,1599 ****
    i := Strings[Index].IndexOf('=');
    if i >= 0 then
!     Result := Strings[Index].SubString(0, i - 1)
    else
      Result := '';
--- 1598,1604 ----
    i := Strings[Index].IndexOf('=');
    if i >= 0 then
!     // truncating SubString
!     //Result := Strings[Index].SubString(0, i - 1)
!     Result := Strings[Index].SubString(0, i)
    else
      Result := '';
***************
*** 1836,1840 ****
      if i >= 0 then
      begin
!       AName := Strings[Result].SubString(0,i-1);
        if CompareStrings(AName, Name) = 0 then
          Exit;
--- 1841,1847 ----
      if i >= 0 then
      begin
!       // Truncating string    
!       //AName := Strings[Result].SubString(0,i-1);
!       AName := Strings[Result].SubString(0,i);
        if CompareStrings(AName, Name) = 0 then
          Exit;
***************
*** 2247,2251 ****
    with T := new System.IO.StreamWriter(FStream) do 
    begin  
!     T.WriteLine(Value); 
    end;
  end;
--- 2254,2259 ----
    with T := new System.IO.StreamWriter(FStream) do 
    begin  
!     T.WriteLine(Value);
!    T.Flush; // Need Flush to write files
    end;
  end;

Index: IniFiles.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL/IniFiles.pas,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** IniFiles.pas	18 Jul 2005 13:09:32 -0000	1.6
--- IniFiles.pas	21 Mar 2006 16:24:27 -0000	1.7
***************
*** 12,15 ****
--- 12,16 ----
  //
  // 2005-06-04   :   Lloyd Kinsella    : Modifications to support newer TDateTime implementation
+ // 2006-03-21   :   Corwin Burgess  : Fixed index outofbounds in TMemIniFile.SetStrings
  
  namespace ShineOn.RTL;
***************
*** 336,340 ****
          j := S.IndexOf('=');
          if j > -1 then
!           S := S.SubString(0, j - 1).Trim + '=' + S.SubString(j + 1, S.Length).Trim; // VCL trims spaces before and after the first "=" (if found), so we better do the same
          Str.Add(S);  
        end;
--- 337,343 ----
          j := S.IndexOf('=');
          if j > -1 then
!           // truncate and index outofbounds        
!           //S := S.SubString(0, j - 1).Trim + '=' + S.SubString(j + 1, S.Length).Trim; // VCL trims spaces before and after the first "=" (if found), so we better do the same
!           S := S.SubString(0, j).Trim + '=' + S.SubString(j + 1, S.Length - (j + 1)).Trim; // VCL trims spaces before and after the first "=" (if found), so we better do the same
          Str.Add(S);  
        end;

Index: ShineOn.RTL.chrome
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL/ShineOn.RTL.chrome,v
retrieving revision 1.9
retrieving revision 1.10
diff -C2 -d -r1.9 -r1.10
*** ShineOn.RTL.chrome	28 Jun 2005 13:29:37 -0000	1.9
--- ShineOn.RTL.chrome	21 Mar 2006 16:24:27 -0000	1.10
***************
*** 1,99 ****
! <ChromeProject>
!   <ProjectOptions Name="ShineOn.RTL">
!     <ProjectID>{EADE7853-FDBE-4770-B0B2-5FF5FDD2DBF7}</ProjectID>
!     <DefaultNamespace>ShineOn.RTL</DefaultNamespace>
!     <StartupClass>
!     </StartupClass>
      <OutputType>library</OutputType>
      <AssemblyName>ShineOn.RTL</AssemblyName>
      <AllowGlobals>True</AllowGlobals>
      <AllowLegacyWith>True</AllowLegacyWith>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <AllowLegacyCreate>True</AllowLegacyCreate>
!     <ApplicationIcon>
!     </ApplicationIcon>
!   </ProjectOptions>
!   <References>
!     <Reference Assembly="$(Framework)\mscorlib.dll" Display="mscorlib" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.dll" Display="System" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.Drawing.dll" Display="System.Drawing" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.Windows.Forms.dll" Display="System.Windows.Forms.dll" CopyLocal="False" />
!   </References>
!   <Configurations>
!     <Configuration Name="Debug">
!       <Conditionals>DEBUG;TRACE;MSWINDOWS</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>True</GeneratePDB>
!       <GenerateMDB>True</GenerateMDB>
!       <EnableAsserts>True</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!       <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     </Configuration>
!     <Configuration Name="Release">
!       <Conditionals>MSWINDOWS</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>False</GeneratePDB>
!       <GenerateMDB>False</GenerateMDB>
!       <EnableAsserts>False</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!       <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     </Configuration>
!   </Configurations>
!   <Files>
!     <File Filename="AssemblyInfo.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Classes.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Consts.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Contnrs.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Globals.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="IniFiles.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Langs.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="System.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="SysUtils.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Types.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!   </Files>
! </ChromeProject>
\ No newline at end of file
--- 1,86 ----
! <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
!   <PropertyGroup>
!     <ProjectGuid>{EADE7853-FDBE-4770-B0B2-5FF5FDD2DBF7}</ProjectGuid>
!     <ApplicationIcon />
!     <StartPage />
!     <DefaultUses />
!     <InternalAssemblyName />
!     <RootNamespace>ShineOn.RTL</RootNamespace>
!     <StartupClass />
      <OutputType>library</OutputType>
      <AssemblyName>ShineOn.RTL</AssemblyName>
      <AllowGlobals>True</AllowGlobals>
      <AllowLegacyWith>True</AllowLegacyWith>
+     <AllowLegacyCreate>True</AllowLegacyCreate>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <SCCProjectName />
!     <SCCAuxPath />
!     <SCCLocalPath />
!     <SCCProvider />
!     <ServerPath />
!     <ProjectTypeGuids />
!     <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
!     <DefineConstants>DEBUG;TRACE;MSWINDOWS</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>True</GeneratePDB>
!     <GenerateMDB>True</GenerateMDB>
!     <EnableAsserts>True</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
!     <DefineConstants>MSWINDOWS</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>False</GeneratePDB>
!     <GenerateMDB>False</GenerateMDB>
!     <EnableAsserts>False</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <Import Project="$(MSBuildExtensionsPath)\RemObjects Software\Chrome\RemObjects.Chrome.targets" />
!   <ItemGroup>
!     <Reference Include="$(Framework)\mscorlib.dll" />
!     <Reference Include="$(Framework)\System.dll" />
!     <Reference Include="$(Framework)\System.Drawing.dll" />
!     <Reference Include="$(Framework)\System.Windows.Forms.dll">
!       <Name>System.Windows.Forms.dll</Name>
!     </Reference>
!   </ItemGroup>
!   <ItemGroup>
!     <Compile Include="AssemblyInfo.pas" />
!     <Compile Include="Classes.pas" />
!     <Compile Include="Consts.pas" />
!     <Compile Include="Contnrs.pas" />
!     <Compile Include="Globals.pas" />
!     <Compile Include="IniFiles.pas" />
!     <Compile Include="Langs.pas" />
!     <Compile Include="System.pas" />
!     <Compile Include="SysUtils.pas" />
!     <Compile Include="Types.pas" />
!   </ItemGroup>
! </Project>
\ No newline at end of file



From nobody at sheep.berlios.de  Tue Mar 21 17:24:03 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Tue, 21 Mar 2006 17:24:03 +0100
Subject: [Shineon-checkins] ShineOn/NUnit NUnit.ShineOn.RTL.chrome,1.3,1.4 TestFileStream.pas,1.1,1.2 TestIniFiles.pas,1.3,1.4 TestStringRead.pas,1.1,1.2 TestStringWrite.pas,1.1,1.2 TestSystem.pas,1.7,1.8
Message-ID: <200603211624.k2LGO3t24538@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv1618/NUnit

Modified Files:
	NUnit.ShineOn.RTL.chrome TestFileStream.pas TestIniFiles.pas 
	TestStringRead.pas TestStringWrite.pas TestSystem.pas 
Log Message:
Removed Console code from TestFileStream
In TestIniFiles added TIniFilesTests.ReadString, IniFilesTests.WriteString, TIniFilesTests.ReadInteger, TIniFilesTests.WriteInteger, TIniFilesTests.ReadBool, TIniFilesTests.WriteBool, TIniFilesTests.ReadFloat, TIniFilesTests.WriteFloat, TIniFilesTests.Clear, TIniFilesTests.UpdateFile, TIniFilesTests.ReadSection, TIniFilesTests.GetStrings, TIniFilesTests.SetStrings and fixed code in AddSomeData.
In TestSystem changed Math.Truncate(D2) to Decimal.Truncate so it would build on vs2003.
In Classes fixed file not writing in THandleStream.WriteLine by adding Flush, fixed truncating problem in TStrings.IndexOfObject and fixed truncating problem in TStrings.GetName.
In IniFiles fixed index outofbounds in TMemIniFile.SetStrings.

Index: NUnit.ShineOn.RTL.chrome
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/NUnit.ShineOn.RTL.chrome,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** NUnit.ShineOn.RTL.chrome	31 May 2005 19:58:43 -0000	1.3
--- NUnit.ShineOn.RTL.chrome	21 Mar 2006 16:24:27 -0000	1.4
***************
*** 1,87 ****
! <ChromeProject>
!   <ProjectOptions Name="NUnit.ShineOn.RTL">
!     <ProjectID>{78329CFC-D7AA-468C-8DF7-DBC4C14D671C}</ProjectID>
!     <DefaultNamespace>NUnit.ShineOn.RTL</DefaultNamespace>
!     <StartupClass>
!     </StartupClass>
      <OutputType>library</OutputType>
      <AssemblyName>Nunit.ShineOn.RTL</AssemblyName>
      <AllowGlobals>False</AllowGlobals>
      <AllowLegacyWith>False</AllowLegacyWith>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <AllowLegacyCreate>True</AllowLegacyCreate>
!     <ApplicationIcon>
!     </ApplicationIcon>
!   </ProjectOptions>
!   <References>
!     <Reference Assembly="$(Framework)\mscorlib.dll" Display="mscorlib" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.dll" Display="System" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.Drawing.dll" Display="System.Drawing" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.Windows.Forms.dll" Display="System.Windows.Forms" CopyLocal="False" />
!     <Reference Assembly="..\..\..\..\..\NUnit 2.2\bin\nunit.framework.dll" Display="nunit.framework" CopyLocal="False" />
!     <Reference Assembly="..\bin\ShineOn.RTL.dll" Display="ShineOn.RTL.dll" CopyLocal="False" />
!   </References>
!   <Configurations>
!     <Configuration Name="Debug">
!       <Conditionals>DEBUG;TRACE;</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>True</GeneratePDB>
!       <GenerateMDB>False</GenerateMDB>
!       <EnableAsserts>True</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Application</StartMode>
!       <StartApp>..\..\..\..\..\NUnit 2.2\bin\nunit-gui.exe</StartApp>
!       <StartAppParams>NUnit.ShineOn.RTL.dll</StartAppParams>
!       <WorkingDir>..\bin</WorkingDir>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!       <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     </Configuration>
!     <Configuration Name="Release">
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>False</GeneratePDB>
!       <GenerateMDB>False</GenerateMDB>
!       <EnableAsserts>False</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!       <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     </Configuration>
!   </Configurations>
!   <Files>
!     <File Filename="AssemblyInfo.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="TestClasses.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="TestContnrs.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="TestIniFiles.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="TestSystem.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="TestSysUtils.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!   </Files>
! </ChromeProject>
\ No newline at end of file
--- 1,90 ----
! <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
!   <PropertyGroup>
!     <ProjectGuid>{78329CFC-D7AA-468C-8DF7-DBC4C14D671C}</ProjectGuid>
!     <ApplicationIcon />
!     <StartPage />
!     <DefaultUses />
!     <InternalAssemblyName />
!     <RootNamespace>NUnit.ShineOn.RTL</RootNamespace>
!     <StartupClass />
      <OutputType>library</OutputType>
      <AssemblyName>Nunit.ShineOn.RTL</AssemblyName>
      <AllowGlobals>False</AllowGlobals>
      <AllowLegacyWith>False</AllowLegacyWith>
+     <AllowLegacyCreate>True</AllowLegacyCreate>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <SCCProjectName />
!     <SCCAuxPath />
!     <SCCLocalPath />
!     <SCCProvider />
!     <ServerPath />
!     <ProjectTypeGuids />
!     <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
!     <DefineConstants>DEBUG;TRACE;</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>True</GeneratePDB>
!     <GenerateMDB>False</GenerateMDB>
!     <EnableAsserts>True</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartApp>C:\Program Files\NUnit 2.2.7\bin\nunit-gui.exe</StartApp>
!     <StartAppParams>NUnit.ShineOn.RTL.dll</StartAppParams>
!     <WorkingDir>..\bin</WorkingDir>
!     <StartMode>Application</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>False</GeneratePDB>
!     <GenerateMDB>False</GenerateMDB>
!     <EnableAsserts>False</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <Import Project="$(MSBuildExtensionsPath)\RemObjects Software\Chrome\RemObjects.Chrome.targets" />
!   <ItemGroup>
!     <Reference Include="$(Framework)\mscorlib.dll" />
!     <Reference Include="C:\Program Files\NUnit 2.2.7\bin\nunit.framework.dll" />
!     <Reference Include="..\bin\ShineOn.RTL.dll">
!       <Name>ShineOn.RTL.dll</Name>
!     </Reference>
!     <Reference Include="$(Framework)\System.dll" />
!     <Reference Include="$(Framework)\System.Drawing.dll" />
!     <Reference Include="$(Framework)\System.Windows.Forms.dll" />
!   </ItemGroup>
!   <ItemGroup>
!     <Compile Include="AssemblyInfo.pas" />
!     <Compile Include="TestClasses.pas" />
!     <Compile Include="TestContnrs.pas" />
!     <Compile Include="TestFileStream.pas" />
!     <Compile Include="TestIniFiles.pas" />
!     <Compile Include="TestStringRead.pas" />
!     <Compile Include="TestStringWrite.pas" />
!     <Compile Include="TestSystem.pas" />
!     <Compile Include="TestSysUtils.pas" />
!     <Compile Include="TestTDateTime.pas" />
!   </ItemGroup>
! </Project>
\ No newline at end of file

Index: TestFileStream.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestFileStream.pas,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** TestFileStream.pas	17 Mar 2006 14:26:18 -0000	1.1
--- TestFileStream.pas	21 Mar 2006 16:24:27 -0000	1.2
***************
*** 184,190 ****
  		    bazFileStream.Close;
      end;
- // NUnit.ShineOn.RTL.TestFileStream.TestWriteVerifyAccessMode : 
- // System.NotSupportedException : 
- // Stream does not support writing.
  end;
  
--- 184,187 ----
***************
*** 200,206 ****
  		    bazFileStream.Close;
      end;
- // NUnit.ShineOn.RTL.TestFileStream.TestWriteByteVerifyAccessMode :
- // System.NotSupportedException : 
- // Stream does not support writing.
  end;
  
--- 197,200 ----
***************
*** 381,387 ****
              // Invalid handle
              NUnit.Framework.Assert.AreEqual(typeof (AssertionException), E.GetType, 'test#05');
-             // NUnit.ShineOn.RTL.TestFileStream.TestCtorExceptions2 : test#05
- 	        // expected: <System.IO.IOException>
- 	        // but was: <NUnit.Framework.AssertionException>                        
          end;
      end;
--- 375,378 ----
***************
*** 608,618 ****
  begin
      var SFilename:String := System.IO.Path.GetTempPath + 'SaveToFile.txt'; 
-     Console.Out.WriteLine('SFilename: {0}', SFilename);
-     //var strFolderPath:String := System.IO.Path.GetTempPath;
-     //strFolderPath := strFolderPath.Replace(System.IO.Path.DirectorySeparatorChar,System.IO.Path.AltDirectorySeparatorChar);
-     //Console.Out.WriteLine('strFolderPath: {0}', strFolderPath);
-         
-     //SFilename := strFolderPath + 'SaveToFile.txt'; 
-     //Console.Out.WriteLine('SFilename: {0}', SFilename);
          
      if (System.IO.File.Exists (SFilename)) then
--- 599,602 ----
***************
*** 627,636 ****
          SL.Add('Int1=1');    
                  
-         // test of SL
-         for i:Integer := 0 to SL.Count-1do
-         begin    
-             Console.Out.WriteLine('SL[{0}] {1}', i, SL[i]);
-         end;     // end of test   
- 
          SL.SaveToFile(SFilename);
  
--- 611,614 ----

Index: TestIniFiles.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestIniFiles.pas,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** TestIniFiles.pas	17 Mar 2006 14:40:10 -0000	1.3
--- TestIniFiles.pas	21 Mar 2006 16:24:27 -0000	1.4
***************
*** 7,10 ****
--- 7,27 ----
  // limitations under the License.
  
+ // History:
+ //
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.ReadString test.
+ // 2006-03-21   :   Corwin Burgess  : Added IniFiles.UpdateFile to AddSomeData.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.WriteString.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.ReadInteger.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.WriteInteger.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.ReadBool.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.WriteBool.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.ReadFloat.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.WriteFloat.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.Clear.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.UpdateFile.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.ReadSection.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.GetStrings.
+ // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.SetStrings.
+ 
  // $Id$
  namespace NUnit.ShineOn.RTL;
***************
*** 28,36 ****
      [TearDown]
      method TearDown;override;
!     [Test, Ignore('Test not implemented')] 
      method Clear;
!     [Test, Ignore('Test not implemented')] 
      method GetStrings;
!     [Test, Ignore('Test not implemented')] 
      method SetStrings;
      [Test, Ignore('Test not implemented')] 
--- 45,53 ----
      [TearDown]
      method TearDown;override;
!     [Test] 
      method Clear;
!     [Test] 
      method GetStrings;
!     [Test] 
      method SetStrings;
      [Test, Ignore('Test not implemented')] 
***************
*** 38,52 ****
      [Test, Ignore('Test not implemented')] 
      method SectionExists;
!     [Test, Ignore('Test not implemented')] 
      method ReadString;
!     [Test, Ignore('Test not implemented')] 
      method WriteString;
!     [Test, Ignore('Test not implemented')] 
      method ReadInteger;
!     [Test, Ignore('Test not implemented')] 
      method WriteInteger;
!     [Test, Ignore('Test not implemented')] 
      method ReadBool;
!     [Test, Ignore('Test not implemented')] 
      method WriteBool;
      [Test, Ignore('Test not implemented')] 
--- 55,69 ----
      [Test, Ignore('Test not implemented')] 
      method SectionExists;
!     [Test] 
      method ReadString;
!     [Test] 
      method WriteString;
!     [Test] 
      method ReadInteger;
!     [Test] 
      method WriteInteger;
!     [Test] 
      method ReadBool;
!     [Test] 
      method WriteBool;
      [Test, Ignore('Test not implemented')] 
***************
*** 56,60 ****
      [Test, Ignore('Test not implemented')] 
      method ReadDateTime;
!     [Test, Ignore('Test not implemented')] 
      method ReadFloat;
      [Test, Ignore('Test not implemented')] 
--- 73,77 ----
      [Test, Ignore('Test not implemented')] 
      method ReadDateTime;
!     [Test] 
      method ReadFloat;
      [Test, Ignore('Test not implemented')] 
***************
*** 66,74 ****
      [Test, Ignore('Test not implemented')] 
      method WriteDateTime;
!     [Test, Ignore('Test not implemented')] 
      method WriteFloat;
      [Test, Ignore('Test not implemented')] 
      method WriteTime;
!     [Test, Ignore('Test not implemented')] 
      method ReadSection;
      [Test, Ignore('Test not implemented')] 
--- 83,91 ----
      [Test, Ignore('Test not implemented')] 
      method WriteDateTime;
!     [Test] 
      method WriteFloat;
      [Test, Ignore('Test not implemented')] 
      method WriteTime;
!     [Test] 
      method ReadSection;
      [Test, Ignore('Test not implemented')] 
***************
*** 80,84 ****
      [Test, Ignore('Test not implemented')] 
      method DeleteKey;
!     [Test, Ignore('Test not implemented')] 
      method UpdateFile;
      [Test, Ignore('Test not implemented')] 
--- 97,101 ----
      [Test, Ignore('Test not implemented')] 
      method DeleteKey;
!     [Test] 
      method UpdateFile;
      [Test, Ignore('Test not implemented')] 
***************
*** 115,124 ****
  method TIniFilesTests.GetStrings; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.SetStrings; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 132,159 ----
  method TIniFilesTests.GetStrings; 
  begin
!   var SL:TStringList;
!   var S:String;
!   SL := new TStringList;
!   IniFile.GetStrings(SL);
!   S := IniFile.ReadString('Test','String', 'error');
!   NUnit.Framework.Assert.AreEqual('TextData', S);
!   SL.free;
  end;
  
  method TIniFilesTests.SetStrings; 
  begin
!   var S:String;
!   var SL:TStringList;
!   SL := new TStringList;
!   IniFile.GetStrings(SL);
!   S := IniFile.ReadString('Test','String', 'error');
!   NUnit.Framework.Assert.AreEqual('TextData', S);
!   IniFile.Clear;
!   S := IniFile.ReadString('Test','String', 'error');
!   NUnit.Framework.Assert.AreEqual('error', S);
!   IniFile.SetStrings(SL);
!   S := IniFile.ReadString('Test','String', 'error');
!   NUnit.Framework.Assert.AreEqual('TextData', S);
!   SL.free;
  end;
  
***************
*** 135,164 ****
  method TIniFilesTests.ReadString; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.WriteString; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.ReadInteger; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.WriteInteger; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.ReadBool; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.WriteBool; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 170,245 ----
  method TIniFilesTests.ReadString; 
  begin
!   var S:String;
!   S := IniFile.ReadString('Test','String','');
!   NUnit.Framework.Assert.AreEqual('TextData', S);
  end;
  
  method TIniFilesTests.WriteString; 
  begin
!   var S:String;
!   IniFile.WriteString('NewTest','NewString','NewTextData');
!   IniFile.UpdateFile;
!   S := IniFile.ReadString('NewTest','NewString','');
!   NUnit.Framework.Assert.AreEqual('NewTextData', S);
  end;
  
  method TIniFilesTests.ReadInteger; 
  begin
!   var I1:Integer;
!   var I2:Integer;
!   var I3:Integer;
!   var I4:Integer;
!   I1 := IniFile.ReadInteger('Test','Int0',99);
!   I2 := IniFile.ReadInteger('Test','Int1',99);
!   I3 := IniFile.ReadInteger('Test','Int2',99);
!   I4 := IniFile.ReadInteger('Test','Int3',99);
!   NUnit.Framework.Assert.AreEqual(0, I1);
!   NUnit.Framework.Assert.AreEqual(1, I2);
!   NUnit.Framework.Assert.AreEqual(-1, I3);
!   NUnit.Framework.Assert.AreEqual(2, I4);
  end;
  
  method TIniFilesTests.WriteInteger; 
  begin
!   var I1:Integer;
!   var I2:Integer;
!   var I3:Integer;
!   var I4:Integer;
!   IniFile.WriteInteger('NewTest','NewInt0',0);
!   IniFile.WriteInteger('NewTest','NewInt1',1);
!   IniFile.WriteInteger('NewTest','NewInt2',-1);
!   IniFile.WriteInteger('NewTest','NewInt3',2);
!   IniFile.UpdateFile;
!   I1 := IniFile.ReadInteger('NewTest','NewInt0',99);
!   I2 := IniFile.ReadInteger('NewTest','NewInt1',99);
!   I3 := IniFile.ReadInteger('NewTest','NewInt2',99);
!   I4 := IniFile.ReadInteger('NewTest','NewInt3',99);
!   NUnit.Framework.Assert.AreEqual(0, I1);
!   NUnit.Framework.Assert.AreEqual(1, I2);
!   NUnit.Framework.Assert.AreEqual(-1, I3);
!   NUnit.Framework.Assert.AreEqual(2, I4);
  end;
  
  method TIniFilesTests.ReadBool; 
  begin
!   var BT:Boolean;
!   var BF:Boolean;
!   BT := IniFile.ReadBool('Test','BoolTrue',False);
!   BF := IniFile.ReadBool('Test','BoolFalse',True);
!   NUnit.Framework.Assert.AreEqual(True, BT);
!   NUnit.Framework.Assert.AreEqual(False, BF);
  end;
  
  method TIniFilesTests.WriteBool; 
  begin
!   var BT:Boolean;
!   var BF:Boolean;
!   IniFile.WriteBool('NewTest','BoolTrue',True);
!   IniFile.WriteBool('NewTest','BoolFalse',False);
!   IniFile.UpdateFile;
!   BT := IniFile.ReadBool('Test','BoolTrue',False);
!   BF := IniFile.ReadBool('Test','BoolFalse',True);
!   NUnit.Framework.Assert.AreEqual(True, BT);
!   NUnit.Framework.Assert.AreEqual(False, BF);
  end;
  
***************
*** 180,184 ****
  method TIniFilesTests.ReadFloat; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 261,279 ----
  method TIniFilesTests.ReadFloat; 
  begin
!   var F1:Double;
!   var F2:Double;
!   var F3:Double;
!   var F4:Double;
!   var F5:Double;
!   F1 := IniFile.ReadFloat('Test','Float1',9.9);
!   F2 := IniFile.ReadFloat('Test','Float2',9.9);
!   F3 := IniFile.ReadFloat('Test','Float3',9.9);
!   F4 := IniFile.ReadFloat('Test','Float4',9.9);
!   F5 := IniFile.ReadFloat('Test','Float5',9.9);
!   NUnit.Framework.Assert.AreEqual(0.0, F1);
!   NUnit.Framework.Assert.AreEqual(1.5, F2);
!   NUnit.Framework.Assert.AreEqual(3.141592, F3);
!   NUnit.Framework.Assert.AreEqual(-1.0, F4);
!   NUnit.Framework.Assert.AreEqual(-0.0, F5);
  end;
  
***************
*** 205,209 ****
  method TIniFilesTests.WriteFloat; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 300,324 ----
  method TIniFilesTests.WriteFloat; 
  begin
!   var F1:Double;
!   var F2:Double;
!   var F3:Double;
!   var F4:Double;
!   var F5:Double;
!   IniFile.WriteFloat('NewTest','Float1',0.0);
!   IniFile.WriteFloat('NewTest','Float2',1.5);
!   IniFile.WriteFloat('NewTest','Float3',3.141592);
!   IniFile.WriteFloat('NewTest','Float4',-1.0);
!   IniFile.WriteFloat('NewTest','Float5',-0.0);
!   IniFile.UpdateFile;
!   F1 := IniFile.ReadFloat('NewTest','Float1',0.0);
!   F2 := IniFile.ReadFloat('NewTest','Float2',1.5);
!   F3 := IniFile.ReadFloat('NewTest','Float3',3.141592);
!   F4 := IniFile.ReadFloat('NewTest','Float4',-1.0);
!   F5 := IniFile.ReadFloat('NewTest','Float5',-0.0);
!   NUnit.Framework.Assert.AreEqual(0.0, F1);
!   NUnit.Framework.Assert.AreEqual(1.5, F2);
!   NUnit.Framework.Assert.AreEqual(3.141592, F3);
!   NUnit.Framework.Assert.AreEqual(-1.0, F4);
!   NUnit.Framework.Assert.AreEqual(-0.0, F5);
  end;
  
***************
*** 215,219 ****
  method TIniFilesTests.ReadSection; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 330,342 ----
  method TIniFilesTests.ReadSection; 
  begin
!   var S:TStringList;
!   S := new TStringlist;
!   { Read the specified section }
!   IniFile.ReadSection('Test', S);
!   { Output the section to the screen }
!   NUnit.Framework.Assert.AreEqual('String', S.Strings[0].ToString);
!   NUnit.Framework.Assert.AreEqual('Int0', S.Strings[1].ToString);
!   NUnit.Framework.Assert.AreEqual('Int1', S.Strings[2].ToString);
!   S.free;
  end;
  
***************
*** 240,244 ****
  method TIniFilesTests.UpdateFile; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 363,371 ----
  method TIniFilesTests.UpdateFile; 
  begin
!   var S:String;
!   IniFile.WriteString('Update','String','TextData');
!   IniFile.UpdateFile;
!   S := IniFile.ReadString('Update','String','');
!   NUnit.Framework.Assert.AreEqual('TextData', S);
  end;
  
***************
*** 260,272 ****
    IniFile.WriteBool('Test','BoolFalse',False);
  
-   //IniFile.WriteDate('Test', 'Date', TDateTime.Date);
-   //IniFile.WriteDateTime('Test', 'Now', TDateTime.Now);
-   //IniFile.WriteTime('Test', 'Time', TDateTime.Time);
- 
    IniFile.WriteFloat('Test','Float1',0.0);
    IniFile.WriteFloat('Test','Float2',1.5);
    IniFile.WriteFloat('Test','Float3',3.141592);
    IniFile.WriteFloat('Test','Float4',-1.0);
!   IniFile.WriteFloat('Test','Float4',-0.0);
  end;
  
--- 387,402 ----
    IniFile.WriteBool('Test','BoolFalse',False);
  
    IniFile.WriteFloat('Test','Float1',0.0);
    IniFile.WriteFloat('Test','Float2',1.5);
    IniFile.WriteFloat('Test','Float3',3.141592);
    IniFile.WriteFloat('Test','Float4',-1.0);
!   IniFile.WriteFloat('Test','Float5',-0.0);
!   
!   //IniFile.WriteDate('Test', 'Date', TDateTime.Date);
!   //IniFile.WriteDateTime('Test', 'Now', TDateTime.Now);
!   //IniFile.WriteTime('Test', 'Time', TDateTime.Time);
! 
!   IniFile.UpdateFile;  
!           
  end;
  

Index: TestStringRead.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestStringRead.pas,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** TestStringRead.pas	17 Mar 2006 14:39:07 -0000	1.1
--- TestStringRead.pas	21 Mar 2006 16:24:27 -0000	1.2
***************
*** 52,56 ****
   	
      inputLine := S.ReadLine; 	
-     //while ((inputLine := sr.ReadLine) <> nil) do
      while (inputLine <> nil) do
      begin	
--- 52,55 ----
***************
*** 126,131 ****
  
  	(* Read to end of string *)
- 	//reader = new StringReader( "Test String" );
- 
  	test := new char[6];
  	charsRead := R.Read( test, 0, 6 );
--- 125,128 ----
***************
*** 134,143 ****
  
  	(* Read past end of string *)
- 
  	test := new char[6];
  	R := new System.IO.StringReader( 'Foo' );
  	charsRead := R.Read( test, 0, 6 );
  	NUnit.Framework.Assert.AreEqual( 3, charsRead );
- 	// AssertEquals(  "Foo\0\0\0", new String( test ) );
      var snil := char(0);
  	NUnit.Framework.Assert.AreEqual(  'Foo'+snil+snil+snil, new String( test ) );
--- 131,138 ----
***************
*** 155,171 ****
  
      var test:String := R.ReadLine;
- 
      NUnit.Framework.Assert.AreEqual( 'Line1', test );
- 
      test := R.ReadLine;
- 
      NUnit.Framework.Assert.AreEqual( 'Line2', test );
- 
      test := R.ReadLine;
- 
      NUnit.Framework.Assert.AreEqual( 'Line3', test );
- 
      test := R.ReadLine;
- 
      NUnit.Framework.Assert.AreEqual( 'Line4', test );
  end;
--- 150,159 ----

Index: TestStringWrite.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestStringWrite.pas,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** TestStringWrite.pas	17 Mar 2006 14:39:22 -0000	1.1
--- TestStringWrite.pas	21 Mar 2006 16:24:27 -0000	1.2
***************
*** 154,160 ****
  begin
      try
-         // StringWriter writer = new StringWriter (null as StringBuilder);
-         //var writer : StringWriter := new StringWriter(nil as StringBuilder);        
-         // error (CE16) Operator 'as' cannot be applied to operands of type <nil> and <type>
          var W:System.IO.StringWriter;
          W := new System.IO.StringWriter;
--- 154,157 ----
***************
*** 162,186 ****
      except
          on E: Exception do begin
-             //NUnit.Framework.Assert.AreEqual(typeof(ArgumentNullException), E.GetType, 'Exceptions 1');
-             // expected 'AssertionException' 
              NUnit.Framework.Assert.AreEqual(typeof(AssertionException), E.GetType, 'Exceptions 1');
          end;
      end;
          
-     // StringWriter writer = new StringWriter (null as IFormatProvider);
-     //var writer : StringWriter := new StringWriter (nil as IFormatProvider);
-     // error (CE16) Operator 'as' cannot be applied to operands of type <nil> and <type>
      var W:System.IO.StringWriter;
      W := new System.IO.StringWriter;
      try
- 	    //StringWriter writer = new StringWriter (null as StringBuilder, null as IFormatProvider);
- 	    //var writer : StringWriter := new StringWriter (nil as StringBuilder, nil as IFormatProvider);
-         // error (CE16) Operator 'as' cannot be applied to operands of type <nil> and <type>
  	    W := new System.IO.StringWriter;
          Fail;
      except
          on E: Exception do begin
-             //NUnit.Framework.Assert.AreEqual(typeof(ArgumentNullException), E.GetType, 'Exceptions 2');
-             // expected 'AssertionException' 
              NUnit.Framework.Assert.AreEqual(typeof(AssertionException), E.GetType, 'Exceptions 2');
          end;
--- 159,173 ----

Index: TestSystem.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestSystem.pas,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** TestSystem.pas	17 Mar 2006 14:42:58 -0000	1.7
--- TestSystem.pas	21 Mar 2006 16:24:27 -0000	1.8
***************
*** 13,16 ****
--- 13,17 ----
  // 2006-02-17   :   Jeroen Vandezande   : Fixed the StringOfChar Test method.
  // 2006-02-17   :   Jeroen Vandezande   : Fixed SystemTests.TruncTDateTime.  
+ // 2006-03-21   :   Corwin Burgess         : Fixed SystemTests.TruncTDateTime. 
  
  namespace NUnit.ShineOn.RTL;
***************
*** 361,365 ****
    var D:TDateTime := new TDateTime(2005, 01, 01, 23, 0, 0, 0);  
    var D2: Double := D;
!   NUnit.Framework.Assert.AreEqual(Math.Truncate(D2), ShineOn.RTL.System.Trunc(D));
  end;
  
--- 362,368 ----
    var D:TDateTime := new TDateTime(2005, 01, 01, 23, 0, 0, 0);  
    var D2: Double := D;
!   // Changed Math.Truncate to Decimal.Truncate to be vs2003 compatible
!   //NUnit.Framework.Assert.AreEqual(Math.Truncate(D2), ShineOn.RTL.System.Trunc(D));
!   NUnit.Framework.Assert.AreEqual((Decimal.Truncate(Decimal(D2))),  ShineOn.RTL.System.Trunc(D)); 
  end;
  



From nobody at sheep.berlios.de  Tue Mar 21 17:24:03 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Tue, 21 Mar 2006 17:24:03 +0100
Subject: [Shineon-checkins] ShineOn/ShineOn.VCL ShineOn.VCL.chrome,1.3,1.4
Message-ID: <200603211624.k2LGO3t24548@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/ShineOn.VCL
In directory sheep:/tmp/cvs-serv1618/ShineOn.VCL

Modified Files:
	ShineOn.VCL.chrome 
Log Message:
Removed Console code from TestFileStream
In TestIniFiles added TIniFilesTests.ReadString, IniFilesTests.WriteString, TIniFilesTests.ReadInteger, TIniFilesTests.WriteInteger, TIniFilesTests.ReadBool, TIniFilesTests.WriteBool, TIniFilesTests.ReadFloat, TIniFilesTests.WriteFloat, TIniFilesTests.Clear, TIniFilesTests.UpdateFile, TIniFilesTests.ReadSection, TIniFilesTests.GetStrings, TIniFilesTests.SetStrings and fixed code in AddSomeData.
In TestSystem changed Math.Truncate(D2) to Decimal.Truncate so it would build on vs2003.
In Classes fixed file not writing in THandleStream.WriteLine by adding Flush, fixed truncating problem in TStrings.IndexOfObject and fixed truncating problem in TStrings.GetName.
In IniFiles fixed index outofbounds in TMemIniFile.SetStrings.

Index: ShineOn.VCL.chrome
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.VCL/ShineOn.VCL.chrome,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** ShineOn.VCL.chrome	23 Apr 2005 11:26:26 -0000	1.3
--- ShineOn.VCL.chrome	21 Mar 2006 16:24:28 -0000	1.4
***************
*** 1,62 ****
! <ChromeProject>
!   <ProjectOptions Name="ShineOn.VCL">
!     <ProjectID>{0D12830E-FF40-428B-A22D-B44134F3C472}</ProjectID>
!     <DefaultNamespace>ShineOn.VCL</DefaultNamespace>
!     <StartupClass>
!     </StartupClass>
      <OutputType>library</OutputType>
      <AssemblyName>ShineOn.VCL</AssemblyName>
      <AllowGlobals>False</AllowGlobals>
      <AllowLegacyWith>False</AllowLegacyWith>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <ApplicationIcon>
!     </ApplicationIcon>
!   </ProjectOptions>
!   <References>
!     <Reference Assembly="$(Framework)\mscorlib.dll" Display="mscorlib" CopyLocal="False" IgnoreStrongName="False" IgnoreVersion="False" />
!     <Reference Assembly="$(Framework)\System.dll" Display="System" CopyLocal="False" IgnoreStrongName="False" IgnoreVersion="False" />
!   </References>
!   <Configurations>
!     <Configuration Name="Debug">
!       <Conditionals>DEBUG;TRACE;MSWINDOWS</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>True</GeneratePDB>
!       <GenerateMDB>True</GenerateMDB>
!       <EnableAsserts>True</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!     </Configuration>
!     <Configuration Name="Release">
!       <Conditionals>MSWINDOWS</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>False</GeneratePDB>
!       <GenerateMDB>False</GenerateMDB>
!       <EnableAsserts>False</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!     </Configuration>
!   </Configurations>
!   <Files>
!     <File Filename="AssemblyInfo.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Controls.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!   </Files>
! </ChromeProject>
\ No newline at end of file
--- 1,74 ----
! <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
!   <PropertyGroup>
!     <ProjectGuid>{0D12830E-FF40-428B-A22D-B44134F3C472}</ProjectGuid>
!     <ApplicationIcon />
!     <StartPage />
!     <DefaultUses />
!     <InternalAssemblyName />
!     <RootNamespace>ShineOn.VCL</RootNamespace>
!     <StartupClass />
      <OutputType>library</OutputType>
      <AssemblyName>ShineOn.VCL</AssemblyName>
      <AllowGlobals>False</AllowGlobals>
      <AllowLegacyWith>False</AllowLegacyWith>
+     <AllowLegacyCreate>True</AllowLegacyCreate>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <SCCProjectName />
!     <SCCAuxPath />
!     <SCCLocalPath />
!     <SCCProvider />
!     <ServerPath />
!     <ProjectTypeGuids />
!     <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
!     <DefineConstants>DEBUG;TRACE;MSWINDOWS</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>True</GeneratePDB>
!     <GenerateMDB>True</GenerateMDB>
!     <EnableAsserts>True</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
!     <DefineConstants>MSWINDOWS</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>False</GeneratePDB>
!     <GenerateMDB>False</GenerateMDB>
!     <EnableAsserts>False</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <Import Project="$(MSBuildExtensionsPath)\RemObjects Software\Chrome\RemObjects.Chrome.targets" />
!   <ItemGroup>
!     <Reference Include="$(Framework)\mscorlib.dll" />
!     <Reference Include="$(Framework)\System.dll" />
!   </ItemGroup>
!   <ItemGroup>
!     <Compile Include="AssemblyInfo.pas" />
!     <Compile Include="Controls.pas" />
!   </ItemGroup>
! </Project>
\ No newline at end of file



From nobody at sheep.berlios.de  Tue Mar 21 17:24:03 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Tue, 21 Mar 2006 17:24:03 +0100
Subject: [Shineon-checkins] ShineOn/ShineOn.RTL.Win32 ShineOn.RTL.Win32.chrome,1.5,1.6
Message-ID: <200603211624.k2LGO3t24541@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/ShineOn.RTL.Win32
In directory sheep:/tmp/cvs-serv1618/ShineOn.RTL.Win32

Modified Files:
	ShineOn.RTL.Win32.chrome 
Log Message:
Removed Console code from TestFileStream
In TestIniFiles added TIniFilesTests.ReadString, IniFilesTests.WriteString, TIniFilesTests.ReadInteger, TIniFilesTests.WriteInteger, TIniFilesTests.ReadBool, TIniFilesTests.WriteBool, TIniFilesTests.ReadFloat, TIniFilesTests.WriteFloat, TIniFilesTests.Clear, TIniFilesTests.UpdateFile, TIniFilesTests.ReadSection, TIniFilesTests.GetStrings, TIniFilesTests.SetStrings and fixed code in AddSomeData.
In TestSystem changed Math.Truncate(D2) to Decimal.Truncate so it would build on vs2003.
In Classes fixed file not writing in THandleStream.WriteLine by adding Flush, fixed truncating problem in TStrings.IndexOfObject and fixed truncating problem in TStrings.GetName.
In IniFiles fixed index outofbounds in TMemIniFile.SetStrings.

Index: ShineOn.RTL.Win32.chrome
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL.Win32/ShineOn.RTL.Win32.chrome,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** ShineOn.RTL.Win32.chrome	28 Jun 2005 13:29:37 -0000	1.5
--- ShineOn.RTL.Win32.chrome	21 Mar 2006 16:24:27 -0000	1.6
***************
*** 1,66 ****
! <ChromeProject>
!   <ProjectOptions Name="ShineOn.RTL.Win32">
!     <ProjectID>{574E35A9-E590-48A6-B154-35824FCF8856}</ProjectID>
!     <DefaultNamespace>ShineOn.RTL.Win32</DefaultNamespace>
!     <StartupClass>
!     </StartupClass>
      <OutputType>library</OutputType>
      <AssemblyName>ShineOn.RTL.Win32</AssemblyName>
      <AllowGlobals>True</AllowGlobals>
      <AllowLegacyWith>True</AllowLegacyWith>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <AllowLegacyCreate>True</AllowLegacyCreate>
!     <ApplicationIcon>
!     </ApplicationIcon>
!   </ProjectOptions>
!   <References>
!     <Reference Assembly="$(Framework)\mscorlib.dll" Display="mscorlib" CopyLocal="False" />
!     <Reference Assembly="..\bin\shineon.rtl.dll" Display="ShineOn.RTL" ProjectReference="{EADE7853-FDBE-4770-B0B2-5FF5FDD2DBF7}" CopyLocal="False" />
!     <Reference Assembly="$(Framework)\System.dll" Display="System" CopyLocal="False" />
!   </References>
!   <Configurations>
!     <Configuration Name="Debug">
!       <Conditionals>DEBUG;TRACE;MSWINDOWS</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>True</GeneratePDB>
!       <GenerateMDB>True</GenerateMDB>
!       <EnableAsserts>True</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!       <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     </Configuration>
!     <Configuration Name="Release">
!       <Conditionals>MSWINDOWS</Conditionals>
!       <OutputPath>..\bin</OutputPath>
!       <GeneratePDB>False</GeneratePDB>
!       <GenerateMDB>False</GenerateMDB>
!       <EnableAsserts>False</EnableAsserts>
!       <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!       <CaptureConsoleOutput>False</CaptureConsoleOutput>
!       <StartMode>Project</StartMode>
!       <RegisterForComInterop>False</RegisterForComInterop>
!       <CpuType>anycpu</CpuType>
!       <RuntimeVersion>v25</RuntimeVersion>
!       <XmlDoc>False</XmlDoc>
!       <XmlDocWarningLevel>WarningOnPublicMembers</XmlDocWarningLevel>
!       <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     </Configuration>
!   </Configurations>
!   <Files>
!     <File Filename="AssemblyInfo.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!     <File Filename="Registry.pas">
!       <ExcludeFromBuild>False</ExcludeFromBuild>
!       <BuildAction>Compile</BuildAction>
!     </File>
!   </Files>
! </ChromeProject>
\ No newline at end of file
--- 1,78 ----
! <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
!   <PropertyGroup>
!     <ProjectGuid>{574E35A9-E590-48A6-B154-35824FCF8856}</ProjectGuid>
!     <ApplicationIcon />
!     <StartPage />
!     <DefaultUses />
!     <InternalAssemblyName />
!     <RootNamespace>ShineOn.RTL.Win32</RootNamespace>
!     <StartupClass />
      <OutputType>library</OutputType>
      <AssemblyName>ShineOn.RTL.Win32</AssemblyName>
      <AllowGlobals>True</AllowGlobals>
      <AllowLegacyWith>True</AllowLegacyWith>
+     <AllowLegacyCreate>True</AllowLegacyCreate>
      <AllowLegacyOutParams>True</AllowLegacyOutParams>
      <AllowUnsafeCode>False</AllowUnsafeCode>
!     <SCCProjectName />
!     <SCCAuxPath />
!     <SCCLocalPath />
!     <SCCProvider />
!     <ServerPath />
!     <ProjectTypeGuids />
!     <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
!     <DefineConstants>DEBUG;TRACE;MSWINDOWS</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>True</GeneratePDB>
!     <GenerateMDB>True</GenerateMDB>
!     <EnableAsserts>True</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
!     <DefineConstants>MSWINDOWS</DefineConstants>
!     <OutputPath>..\bin</OutputPath>
!     <GeneratePDB>False</GeneratePDB>
!     <GenerateMDB>False</GenerateMDB>
!     <EnableAsserts>False</EnableAsserts>
!     <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
!     <RegisterForComInterop>False</RegisterForComInterop>
!     <CaptureConsoleOutput>False</CaptureConsoleOutput>
!     <StartMode>Project</StartMode>
!     <CpuType>anycpu</CpuType>
!     <RuntimeVersion>v25</RuntimeVersion>
!     <EnableUnmanagedDebugging>False</EnableUnmanagedDebugging>
!     <WebDebugTarget>Cassini</WebDebugTarget>
!     <WebLaunchBrowser>False</WebLaunchBrowser>
!     <XmlDocAllMembers>False</XmlDocAllMembers>
!     <CodeFlowAnalysis>True</CodeFlowAnalysis>
!     <UseXmlDoc>False</UseXmlDoc>
!     <XmlDocWarning>WarningOnPublicMembers</XmlDocWarning>
!   </PropertyGroup>
!   <Import Project="$(MSBuildExtensionsPath)\RemObjects Software\Chrome\RemObjects.Chrome.targets" />
!   <ItemGroup>
!     <Reference Include="$(Framework)\mscorlib.dll" />
!     <Reference Include="..\bin\ShineOn.RTL.dll">
!       <Name>ShineOn.RTL.dll</Name>
!       <CopyLocal>True</CopyLocal>
!     </Reference>
!     <Reference Include="$(Framework)\System.dll" />
!   </ItemGroup>
!   <ItemGroup>
!     <Compile Include="AssemblyInfo.pas" />
!     <Compile Include="Registry.pas" />
!   </ItemGroup>
! </Project>
\ No newline at end of file



From nobody at sheep.berlios.de  Tue Mar 21 18:27:36 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Tue, 21 Mar 2006 18:27:36 +0100
Subject: [Shineon-checkins] ShineOn/NUnit TestTDateTime.pas,NONE,1.1
Message-ID: <200603211727.k2LHRZt26707@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv10814/NUnit

Added Files:
	TestTDateTime.pas 
Log Message:
Initial NUnit add to test TDateTime

--- NEW FILE: TestTDateTime.pas ---
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the "License"); 
// you may not use this file except in compliance with the License. You may obtain a copy of the 
// License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF 
// ANY KIND, either express or implied. See the License for the specificlanguage governing rights and 
// limitations under the License.

// History:
//
// 2006-03-19   :   Corwin Burgess    : Converted to Chrome from DateTime

namespace NUnit.ShineOn.RTL;

interface

uses
  NUnit.Framework,
  System,
  System.Threading,
  System.Globalization,
  ShineOn.RTL;

type
	[TestFixture]
  TDateTimeTest = public class(TestCase)
  private
      var oldcult:CultureInfo;
		var myTicks:Array of Int64 := [
											 631501920000000000,	// 25 Feb 2002 - 00:00:00
											 631502475130080000,	// 25 Feb 2002 - 15:25:13,8
											 631502115130080000,	// 25 Feb 2002 - 05:25:13,8
											 631502115000000000,	// 25 Feb 2002 - 05:25:00
											 631502115130000000,	// 25 Feb 2002 - 05:25:13
											 631502079130000000,	// 25 Feb 2002 - 04:25:13
											 629197085770000000	// 06 Nov 1994 - 08:49:37 
										 ];
  
  protected
  public
  	[SetUp]
 		method SetUp;override;
		[TearDown]
		method TearDown;override;
		[Test]
    [Ignore('Ignore this test')]
		method TestCtors;
		[Test]
    [Ignore('Ignore this test')]
 		method TestToString;
		[Test]
    [Ignore('Ignore this test')]
 		method TestParseExact;
		[Test]
    [Ignore('Ignore this test')]
		method TestParse;
		[Test]
    [Ignore('Ignore this test')]
		method TestTicks;
		[Test]
		method TestCtorsFailures;
    constructor;		
  end;
  
implementation

method TDateTimeTest.SetUp; 
begin
  // the current culture determines the result of formatting
	oldcult := Thread.CurrentThread.CurrentCulture;
	Thread.CurrentThread.CurrentCulture := new CultureInfo ('');
end;

method TDateTimeTest.TearDown; 
begin
  Thread.CurrentThread.CurrentCulture := oldcult;		
end;

method TDateTimeTest.TestCtors; 
begin
  var t1:DateTime := new DateTime (2002,2,25);
  var td1:TDateTime := new TDateTime (2002,2,25,0,0,0,0);
  // Year, Month, Day, Hour, Minute, Second, MSec
 	NUnit.Framework.Assert.AreEqual(myTicks[0], td1.Ticks, 'A01');
	var t2:DateTime := new DateTime (2002,2,25,15,25,13,8);
	var td2:TDateTime := new TDateTime (2002,2,25,15,25,13,8);
	NUnit.Framework.Assert.AreEqual(myTicks[1], td2.Ticks, 'A02');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestCtors : A03
	// expected: <-2137800704>
	// but was: <38795> 	
 	NUnit.Framework.Assert.AreEqual(myTicks[0], td2.Date.Ticks, 'A03');
	NUnit.Framework.Assert.AreEqual(2002, td2.Year, 'A04');
	NUnit.Framework.Assert.AreEqual(2, td2.Month, 'A05');
	NUnit.Framework.Assert.AreEqual(25, td2.Day, 'A06');
	NUnit.Framework.Assert.AreEqual(15, td2.Hour, 'A07');
	NUnit.Framework.Assert.AreEqual(25, td2.Minute, 'A08');
	NUnit.Framework.Assert.AreEqual(13, td2.Second, 'A09');
	NUnit.Framework.Assert.AreEqual(8, td2.Msec, 'A10');
	var td3:TDateTime := new TDateTime (2002,2,25,5,25,13,8);
	NUnit.Framework.Assert.AreEqual(myTicks[2], td3.Ticks, 'A11');
  // added	
  NUnit.Framework.Assert.AreEqual(t1.Year, td1.Year, 'A12');
  NUnit.Framework.Assert.AreEqual(t1.Month, td1.Month, 'A13');
  NUnit.Framework.Assert.AreEqual(t1.Day, td1.Day, 'A14');
  NUnit.Framework.Assert.AreEqual(t2.Year, td2.Year, 'A15');
  NUnit.Framework.Assert.AreEqual(t2.Month, td2.Month, 'A16');
  NUnit.Framework.Assert.AreEqual(t2.Day, td2.Day, 'A17');
  NUnit.Framework.Assert.AreEqual(t2.Hour, td2.Hour, 'A18');
  NUnit.Framework.Assert.AreEqual(t2.Minute, td2.Minute, 'A19');
  NUnit.Framework.Assert.AreEqual(t2.Second, td2.Second, 'A20');
     
end;

method TDateTimeTest.TestToString; 
begin
  var t1:TDateTime := new TDateTime (myTicks[2]);
  var td1:TDateTime := new TDateTime (myTicks[2]);
	var t2:DateTime := new DateTime (myTicks[1]);
	var td2:TDateTime := new TDateTime (myTicks[1]);
	// Standard patterns
	//NUnit.Framework.Assert.AreEqual('02/25/2002', td1.ToString ('d'), 'B01');
	//NUnit.Framework.Assert.AreEqual('Monday, 25 February 2002', td1.ToString ('D'), 'B02');
	//NUnit.Framework.Assert.AreEqual('Monday, 25 February 2002 05:25', td1.ToString ('f'), 'B03');
	//NUnit.Framework.Assert.AreEqual('Monday, 25 February 2002 05:25:13', t1.ToString ('F'), 'B04');
	//NUnit.Framework.Assert.AreEqual('02/25/2002 05:25', td1.ToString ('g'), 'B05');
	//NUnit.Framework.Assert.AreEqual('02/25/2002 05:25:13', td1.ToString ('G'), 'B06');
	//NUnit.Framework.Assert.AreEqual('February 25', td1.ToString ('m'), 'B07');
	//NUnit.Framework.Assert.AreEqual('February 25', td1.ToString ('M'), 'B08');
	//NUnit.Framework.Assert.AreEqual('Mon, 25 Feb 2002 05:25:13 GMT', td1.ToString ('r'), 'B09');
	//NUnit.Framework.Assert.AreEqual('Mon, 25 Feb 2002 05:25:13 GMT', td1.ToString ('R'), 'B10');
	//NUnit.Framework.Assert.AreEqual('2002-02-25T05:25:13', td1.ToString ('s'), 'B11');
	//NUnit.Framework.Assert.AreEqual('05:25', td1.ToString ('t'), 'B12');
	//NUnit.Framework.Assert.AreEqual('05:25:13', td1.ToString ('T'), 'B13');
	//NUnit.Framework.Assert.AreEqual('2002-02-25 05:25:13Z', td1.ToString ('u'), 'B14');
  // when I remove comment I got this error. bugzilla by original developer
  // MonoTests.System.DateTimeTest.TestToString : B15
	// String lengths are both 33.
	// Strings differ at index 0.
	// expected: <"Sunday, 24 February 2002 11:25:13">
	// but was:   <"Monday, 25 February 2002 17:25:13">
	// -----------------^
	// FIXME: bugzilla #30030 
	//NUnit.Framework.Assert.AreEqual('Sunday, 24 February 2002 11:25:13', td1.ToUniversalTime().ToString ('U'), 'B15');
	//NUnit.Framework.Assert.AreEqual('2002 February', td1.ToString ('y'), 'B16');
	//NUnit.Framework.Assert.AreEqual('2002 February', td1.ToString ('Y'), 'B17');

	// Custom patterns
	//NUnit.Framework.Assert.AreEqual('25', td1.ToString ('%d'), 'C01');
	//NUnit.Framework.Assert.AreEqual('25', td1.ToString ('dd'), 'C02');
	//NUnit.Framework.Assert.AreEqual('Mon', td1.ToString ('ddd'), 'C03');
	//NUnit.Framework.Assert.AreEqual('Monday', td1.ToString ('dddd'), 'C04');
	//NUnit.Framework.Assert.AreEqual(string('2'), td1.ToString ('%M'), 'C05');
	//NUnit.Framework.Assert.AreEqual('02', td1.ToString ('MM'), 'C06');
	//NUnit.Framework.Assert.AreEqual('Feb', td1.ToString ('MMM'), 'C07');
	//NUnit.Framework.Assert.AreEqual('February', td1.ToString ('MMMM'), 'C08');
	//NUnit.Framework.Assert.AreEqual(string('2'), td1.ToString ('%y'), 'C09');
	//NUnit.Framework.Assert.AreEqual('02', td1.ToString ('yy'), 'C10');
	//NUnit.Framework.Assert.AreEqual('2002', td1.ToString ('yyyy'), 'C11');
	//NUnit.Framework.Assert.AreEqual(string('5'), td1.ToString ('%h'), 'C12');
	//NUnit.Framework.Assert.AreEqual('05', td1.ToString ('hh'), 'C13');
	//NUnit.Framework.Assert.AreEqual(string('3'), td2.ToString ('%h'), 'C14');
	//NUnit.Framework.Assert.AreEqual('03', td2.ToString ('hh'), 'C15');
	//NUnit.Framework.Assert.AreEqual('15', td2.ToString ('%H'), 'C16');
	//NUnit.Framework.Assert.AreEqual('15', td2.ToString ('HH'), 'C17');
	//NUnit.Framework.Assert.AreEqual('25', td2.ToString ('%m'), 'C18');
	//NUnit.Framework.Assert.AreEqual('25', td2.ToString ('mm'), 'C19');
	//NUnit.Framework.Assert.AreEqual('13', td2.ToString ('%s'), 'C20');
	//NUnit.Framework.Assert.AreEqual('13', td2.ToString ('ss'), 'C21');
	//NUnit.Framework.Assert.AreEqual(string('A'), td1.ToString ('%t'), 'C22');
	//NUnit.Framework.Assert.AreEqual(string('P'), td2.ToString ('%t'), 'C23');
	//NUnit.Framework.Assert.AreEqual('AM', td1.ToString ('tt'), 'C24');
	//NUnit.Framework.Assert.AreEqual('PM', td2.ToString ('tt'), 'C25');
	//var offset:Int64 := TimeZone.CurrentTimeZone.GetUtcOffset(td1).Ticks div 36000000000;
	//NUnit.Framework.Assert.AreEqual(offset.ToString('+#;-#;0'), td1.ToString ('%z'), 'C26');
	//NUnit.Framework.Assert.AreEqual(offset.ToString('+00;-00;00'), td1.ToString ('zz'), 'C27');
	//NUnit.Framework.Assert.AreEqual(offset.ToString('+00;-00;00') + ':00', td1.ToString ('zzz'), 'C28');
	//NUnit.Framework.Assert.AreEqual(' : ', td1.ToString (' : '), 'C29');
	//NUnit.Framework.Assert.AreEqual(' / ', td1.ToString (' / '), 'C30');
	//NUnit.Framework.Assert.AreEqual(' yyy ', td1.ToString (' ''yyy'' '), 'C31');
 	//NUnit.Framework.Assert.AreEqual(' d', td1.ToString (' \d'), 'C32');
end;

method TDateTimeTest.TestParseExact; 
begin
  // Standard patterns
	//var td1:TDateTime := TDateTime.ParseExact ('02/25/2002', 'd', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'D01');
	//td1 := TDateTime.ParseExact ('Monday, 25 February 2002', 'D', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'D02');
	//td1 := TDateTime.ParseExact ('Monday, 25 February 2002 05:25', 'f', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[3], td1.Ticks, 'D03');
	//td1 := TDateTime.ParseExact ('Monday, 25 February 2002 05:25:13', 'F', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'D04');
	//td1 := TDateTime.ParseExact ('02/25/2002 05:25', 'g', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[3], td1.Ticks, 'D05');
	//td1 := TDateTime.ParseExact ('02/25/2002 05:25:13', 'G', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'D06');
	//td1 := TDateTime.ParseExact ('2002-02-25 04:25:13Z', 'u', nil);
	//NUnit.Framework.Assert.AreEqual (2002, td1.Year, 'D07a');
	//NUnit.Framework.Assert.AreEqual (02, td1.Month, 'D07b');
	//NUnit.Framework.Assert.AreEqual (25, td1.Day, 'D07c');
	//NUnit.Framework.Assert.AreEqual (04, td1.Hour, 'D07d');
	//NUnit.Framework.Assert.AreEqual (25, td1.Minute, 'D07e');
	//NUnit.Framework.Assert.AreEqual (13, td1.Second, 'D07f');
	//td1 := TDateTime.ParseExact ('Monday, 25 February 2002 04:25:13', 'U', nil);
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(td1);
	//NUnit.Framework.Assert.AreEqual (2002, td1.Year, 'D08a');
	//NUnit.Framework.Assert.AreEqual (02, td1.Month, 'D08b');
	//NUnit.Framework.Assert.AreEqual (25, td1.Day, 'D08c');
	//NUnit.Framework.Assert.AreEqual (04, td1.Hour, 'D08d');
	//NUnit.Framework.Assert.AreEqual (25, td1.Minute, 'D08e');
	//NUnit.Framework.Assert.AreEqual (13, td1.Second, 'D08f');

	//var td2:TDateTime := new TDateTime (TDateTime.Today.Year, 2, 25);
	//td1 := TDateTime.ParseExact ('February 25', 'm', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'D09');

	//td2 := new DateTime (DateTime.Today.Year, 2, 25);
	//td1 := DateTime.ParseExact ('February 25', 'M', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'D10');

	//td1 := TDateTime.ParseExact ('Mon, 25 Feb 2002 04:25:13 GMT', 'r', nil);
	//NUnit.Framework.Assert.AreEqual (2002, td1.Year, 'D11a');
	//NUnit.Framework.Assert.AreEqual (02, td1.Month, 'D11b');
	//NUnit.Framework.Assert.AreEqual (25, td1.Day, 'D11c');
	//NUnit.Framework.Assert.AreEqual (04, td1.Hour, 'D11d');
	//NUnit.Framework.Assert.AreEqual (25, td1.Minute, 'D11e');
	//NUnit.Framework.Assert.AreEqual (13, td1.Second, 'D11f');

	//td1 := TDateTime.ParseExact ('Mon, 25 Feb 2002 04:25:13 GMT', 'R', nil);
	//NUnit.Framework.Assert.AreEqual (2002, td1.Year, 'D12a');
	//NUnit.Framework.Assert.AreEqual (02, td1.Month, 'D12b');
	//NUnit.Framework.Assert.AreEqual (25, td1.Day, 'D12c');
	//NUnit.Framework.Assert.AreEqual (04, td1.Hour, 'D12d');
	//NUnit.Framework.Assert.AreEqual (25, td1.Minute, 'D12e');
	//NUnit.Framework.Assert.AreEqual (13, td1.Second, 'D12f');

	//td1 := TDateTime.ParseExact ('2002-02-25T05:25:13', 's', nil);
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'D13');

	//td2 := TDateTime.Today + new TimeSpan (5,25,0);
	//td1 := TDateTime.ParseExact ('05:25', 't', nil);
	//NUnit.Framework.Assert.AreEqual(td2.Ticks, td1.Ticks, 'D14');

	//td2 := TDateTime.Today + new TimeSpan (5,25,13);
	//td1 := TDateTime.ParseExact ('05:25:13', 'T', nil);
	//NUnit.Framework.Assert.AreEqual(td2.Ticks, td1.Ticks, 'D15');

	//td2 := new TDateTime (2002, 2, 1);
	//td1 := TDateTime.ParseExact ('2002 February', 'y', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'D16');

	//td2 := new TDateTime (2002, 2, 1);
	//td1 := TDateTime.ParseExact ('2002 February', 'Y', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'D16');

	// Custom patterns
	//td2 := new TDateTime (2003, 1, 25);
	//td1 := TDateTime.ParseExact ('25', '%d', nil);
  // MonoTests.System.DateTimeTest.TestParseExact : E01
	// expected: <-695451648>
	// but was: <1800028160>	
	// NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E01');
	//td1 := TDateTime.ParseExact ('25', 'dd', nil);
  // MonoTests.System.DateTimeTest.TestParseExact : E02
	// expected: <-695451648>
	// but was: <1800028160>
  //NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E02');
	//td2 := new TDateTime (TDateTime.Today.Year, 2, 1);
	//td1 := DateTime.ParseExact ('2', '%M', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E03');
	//td1 := TDateTime.ParseExact ('02', 'MM', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E04');
	//td1 := TDateTime.ParseExact ('Feb', 'MMM', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E05');
	//td1 := TDateTime.ParseExact ('February', 'MMMM', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E06');

	//td2 := new TDateTime (2005, 1, 1);
	//td1 := TDateTime.ParseExact ('5', '%y', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E07');
	//td1 := TDateTime.ParseExact ('05', 'yy', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E08');
	//td1 := TDateTime.ParseExact ('2005', 'yyyy', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E09');

	//td2 := TDateTime.Today + new TimeSpan (5, 0, 0);
	//td1 := TDateTime.ParseExact ('5A', 'ht', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E10');
	//td1 := TDateTime.ParseExact ('05A', 'hht', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E11');

	//td2 := TDateTime.Today + new TimeSpan (15, 0, 0);
	//td1 := TDateTime.ParseExact ('3P', 'ht', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E12');
	//td1 := TDateTime.ParseExact ('03P', 'hht', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E13');

	//td2 := TDateTime.Today + new TimeSpan (5, 0, 0);
	//td1 := TDateTime.ParseExact ('5', '%H', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E14');

	//td2 := TDateTime.Today + new TimeSpan (15, 0, 0);
	//td1 := TDateTime.ParseExact ('15', '%H', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E15');
	//td1 := TDateTime.ParseExact ('15', 'HH', nil);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'E16');

	// Time zones
	//td2 := TDateTime.Today + new TimeSpan (17, 18, 0);
	//td1 := TDateTime.ParseExact ('11:18AM -5', 'h:mmtt z', nil);
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(td1);
	//if (not TimeZone.CurrentTimeZone.IsDaylightSavingTime(td1)) then
	//  	td1 := td1 + new TimeSpan(1, 0, 0);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'F01');

	//td1 := TDateTime.ParseExact ('11:18AM -05:00', 'h:mmtt zzz', nil);
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(td1);
	//if (not TimeZone.CurrentTimeZone.IsDaylightSavingTime(td1)) then
	//			td1 := td1 + new TimeSpan(1, 0, 0);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'F02');

	//td1 := TDateTime.ParseExact ('7:18PM +03', 'h:mmtt zz', nil);
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(t1);
	//if (not TimeZone.CurrentTimeZone.IsDaylightSavingTime(td1)) then
	//			td1 := td1 + new TimeSpan(1, 0, 0);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'F03');

	//td1 := TDateTime.ParseExact ('7:48PM +03:30', 'h:mmtt zzz', nil);
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(td1);
	//if (not TimeZone.CurrentTimeZone.IsDaylightSavingTime(td1)) then
	//			td1 := td1 + new TimeSpan(1, 0, 0);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'F04');

	// Options
	//td2 := TDateTime.Today + new TimeSpan (16, 18, 0);
	//td1 := TDateTime.ParseExact ('11:18AM -5', 'h:mmtt z',
	// 		 nil, DateTimeStyles.AdjustToUniversal);
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'G01');

	//td1 := TDateTime.ParseExact ('Monday, 25 February 2002 05:25:13', 'F',
	//			nil, DateTimeStyles.AdjustToUniversal);
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'G02');
	//td1 := DateTime.ParseExact ('Monday, 25 February 2002 05:25:13',
	//			'dddd, dd MMMM yyyy HH:mm:ss',
	//	  nil, DateTimeStyles.AdjustToUniversal);
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'G03');

	//td1 := TDateTime.ParseExact ('02/25/2002', 'd', nil,
	//			DateTimeStyles.AllowWhiteSpaces);
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'G04');

	//td1 := TDateTime.ParseExact ('    02/25/2002', 'd', nil,
	//			DateTimeStyles.AllowLeadingWhite);
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'G05');

	//td1 := TDateTime.ParseExact ('02/25/2002    ', 'd', nil,
	//			DateTimeStyles.AllowTrailingWhite);
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'G06');

	//td1 := TDateTime.ParseExact ('  02 / 25 / 2002    ', 'd', nil,
	//			DateTimeStyles.AllowWhiteSpaces);
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'G07');

	// Multi Custom Patterns
	//var rfc1123_date:string := 'r';
	//var rfc850_date:string := 'dddd, dd"-"MMM"-"yy HH":"mm":"ss GMT';
	//var asctime_date:string := 'ddd MMM d HH":"mm":"ss yyyy';
	//var formats:Array of string := [rfc1123_date, rfc850_date, asctime_date];
	//var enUS:CultureInfo := new CultureInfo('en-US', false);
	//td1 := TDateTime.ParseExact ('Sun, 06 Nov 1994 08:49:37 GMT', formats[0], enUS, 
	//	  DateTimeStyles.AllowWhiteSpaces);
	//NUnit.Framework.Assert.AreEqual (myTicks[6], td1.Ticks, 'M01');
	//td1 := TDateTime.ParseExact ('Sunday, 06-Nov-94 08:49:37 GMT', formats[1], enUS, 
	//			DateTimeStyles.AllowWhiteSpaces);
  // MonoTests.System.DateTimeTest.TestParseExact : M02
	// expected: <1997022848>
	// but was: <745387648>
  // NUnit.Framework.Assert.AreEqual ('M02', myTicks[6], td1.Ticks);
	//td1 := TDateTime.ParseExact ('Sun Nov  6 08:49:37 1994', formats[2], enUS, 
	//			DateTimeStyles.AllowWhiteSpaces);
	//NUnit.Framework.Assert.AreEqual (myTicks[6], td1.Ticks, 'M03');
	//td1 := TDateTime.ParseExact ('Sun, 06 Nov 1994 08:49:37 GMT', formats, enUS, 
	//			DateTimeStyles.AllowWhiteSpaces);
	//NUnit.Framework.Assert.AreEqual (myTicks[6], td1.Ticks, 'M04');
	//td1 := TDateTime.ParseExact ('Sunday, 06-Nov-94 08:49:37 GMT', formats, enUS, 
	//			DateTimeStyles.AllowWhiteSpaces);
  // MonoTests.System.DateTimeTest.TestParseExact : M05
	// expected: <1997022848>
	// but was: <745387648>
  // NUnit.Framework.Assert.AreEqual (myTicks[6], td1.Ticks, 'M05');
	//td1 := TDateTime.ParseExact ('Sun Nov  6 08:49:37 1994', formats, enUS, 
	//			DateTimeStyles.AllowWhiteSpaces);
	//NUnit.Framework.Assert.AreEqual (myTicks[6], td1.Ticks, 'M06');
end;

method TDateTimeTest.TestParse; 
begin
  // Standard patterns
	//var td1:TDateTime := TDateTime.Parse ('02/25/2002');
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'H00');
	//try 
	//  td1 := TDateTime.Parse ('2002-02-25');
	//except
	//  on E: Exception do begin
  //    Fail ('Unexpected exception. E=' + E.Message);
	//  end;
  //end;	  
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'H01');
	//td1 := TDateTime.Parse ('Monday, 25 February 2002');
	//NUnit.Framework.Assert.AreEqual (myTicks[0], td1.Ticks, 'H02');
	//td1 := TDateTime.Parse ('Monday, 25 February 2002 05:25');
	//NUnit.Framework.Assert.AreEqual (myTicks[3], td1.Ticks, 'H03');
	//td1 := TDateTime.Parse ('Monday, 25 February 2002 05:25:13');
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'H04');
	//td1 := TDateTime.Parse ('02/25/2002 05:25');
	//NUnit.Framework.Assert.AreEqual (myTicks[3], td1.Ticks, 'H05');
	//td1 := TDateTime.Parse ('02/25/2002 05:25:13');
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'H06');
	//td1 := TDateTime.Parse ('2002-02-25 04:25:13Z');
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(td1);
	//NUnit.Framework.Assert.AreEqual (2002, td1.Year, 'H07a');
	//NUnit.Framework.Assert.AreEqual (02, td1.Month, 'H07b');
	//NUnit.Framework.Assert.AreEqual (25, td1.Day, 'H07c');
	//NUnit.Framework.Assert.AreEqual (04, td1.Hour, 'H07d');
	//NUnit.Framework.Assert.AreEqual (25, td1.Minute, 'H07e');
	//NUnit.Framework.Assert.AreEqual (13, td1.Second, 'H07f');

	//var td2:TDateTime := new TDateTime (TDateTime.Today.Year, 2, 25);
	//td1 := TDateTime.Parse ('February 25');
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'H08');

	//td2 := new TDateTime (TDateTime.Today.Year, 2, 8);
	//td1 := TDateTime.Parse ('February 08');
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'H09');

	//td1 := TDateTime.Parse ('Mon, 25 Feb 2002 04:25:13 GMT');
	//td1 := TimeZone.CurrentTimeZone.ToUniversalTime(t1);
	//NUnit.Framework.Assert.AreEqual (2002, td1.Year, 'H10a');
	//NUnit.Framework.Assert.AreEqual (02, td1.Month, 'H10b');
	//NUnit.Framework.Assert.AreEqual (25, td1.Day, 'H10c');
	//NUnit.Framework.Assert.AreEqual (04, td1.Hour, 'H10d');
	//NUnit.Framework.Assert.AreEqual (25, td1.Minute, 'H10e');
	//NUnit.Framework.Assert.AreEqual (13, td1.Second, 'H10f');

	//td1 := TDateTime.Parse ('2002-02-25T05:25:13');
	//NUnit.Framework.Assert.AreEqual (myTicks[4], td1.Ticks, 'H11');

	//td2 := TDateTime.Today + new TimeSpan (5,25,0);
	//td1 := TDateTime.Parse ('05:25');
	//NUnit.Framework.Assert.AreEqual(td2.Ticks, td1.Ticks, 'H12');

	//td2 := TDateTime.Today + new TimeSpan (5,25,13);
	//td1 := TDateTime.Parse ('05:25:13');
	//NUnit.Framework.Assert.AreEqual(td2.Ticks, td1.Ticks, 'H13');

	//td2 := new TDateTime (2002, 2, 1);
	//td1 := TDateTime.Parse ('2002 February');
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'H14');

	//td2 := new TDateTime (2002, 2, 1);
	//td1 := TDateTime.Parse ('2002 February');
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'H15');

	//td2 := new TDateTime (TDateTime.Today.Year, 2, 8);
	//td1 := TDateTime.Parse ('February 8');
	//NUnit.Framework.Assert.AreEqual (td2.Ticks, td1.Ticks, 'H16');
end;

constructor TDateTimeTest; 
begin
end;

method TDateTimeTest.TestTicks; 
begin
 	var t1:DateTime := new DateTime (myTicks[0]);
 	var td1:TDateTime := new TDateTime (myTicks[0]);
	NUnit.Framework.Assert.AreEqual(t1.Ticks, td1.Ticks, 'Z01');
 	var t2:DateTime := new DateTime (myTicks[1]);
 	var td2:TDateTime := new TDateTime (myTicks[1]);
	NUnit.Framework.Assert.AreEqual(t2.Ticks, td2.Ticks, 'Z02');
 	var t3:DateTime := new DateTime (myTicks[2]);
 	var td3:TDateTime := new TDateTime (myTicks[2]);
	NUnit.Framework.Assert.AreEqual(t3.Ticks, td3.Ticks, 'Z03');
 	var t4:DateTime := new DateTime (myTicks[3]);
 	var td4:TDateTime := new TDateTime (myTicks[3]);
	NUnit.Framework.Assert.AreEqual(t4.Ticks, td4.Ticks, 'Z04');
 	var t5:DateTime := new DateTime (myTicks[4]);
 	var td5:TDateTime := new TDateTime (myTicks[4]);
	NUnit.Framework.Assert.AreEqual(t5.Ticks, td5.Ticks, 'Z05');
 	var t6:DateTime := new DateTime (myTicks[5]);
 	var td6:TDateTime := new TDateTime (myTicks[5]);
	NUnit.Framework.Assert.AreEqual(t6.Ticks, td6.Ticks, 'Z06');
 	var t7:DateTime := new DateTime (myTicks[6]);
 	var td7:TDateTime := new TDateTime (myTicks[6]);
	NUnit.Framework.Assert.AreEqual(t7.Ticks, td7.Ticks, 'Z07');
end;

method TDateTimeTest.TestCtorsFailures; 
begin
	var t2:DateTime := new DateTime (2002,2,25,15,25,13,8);
	var td2:TDateTime := new TDateTime (2002,2,25,15,25,13,8);
  // 25 Feb 2002 - 15:25:13,8 index 2
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF02
	// expected: <-281249024>
	// but was: <38795> 	
 	NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Date.Ticks, 'TF02');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF03
	// expected: <-281249024>
	// but was: <2002>
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Year, 'TF03');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF04
	// expected: <-281249024>
	// but was: <2>
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Month, 'TF04');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF05
	// expected: <-281249024>
	// but was: <25>
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Day, 'TF05');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF06
	// expected: <-281249024>
	// but was: <15>
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Hour, 'TF06');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF07
	// expected: <-281249024>
	// but was: <25>
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Minute, 'TF07');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF08
	// expected: <-281249024>
	// but was: <13> 	
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.Second, 'TF08');
  // NUnit.ShineOn.RTL.TDateTimeTest.TestFailures : TF09
	// expected: <-281249024>
	// but was: <8> 
  NUnit.Framework.Assert.AreEqual(myTicks[2], td2.MSec, 'TF09');
     	
end;

end.


From nobody at sheep.berlios.de  Mon Mar 27 03:20:38 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Mon, 27 Mar 2006 03:20:38 +0200
Subject: [Shineon-checkins] ShineOn/ShineOn.RTL IniFiles.pas,1.7,1.8
Message-ID: <200603270120.k2R1Kct20799@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/ShineOn.RTL
In directory sheep:/tmp/cvs-serv12919/ShineOn.RTL

Modified Files:
	IniFiles.pas 
Log Message:
Corrected transposed code in TMemIniFile.ReadSections

Index: IniFiles.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/ShineOn.RTL/IniFiles.pas,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** IniFiles.pas	21 Mar 2006 16:24:27 -0000	1.7
--- IniFiles.pas	27 Mar 2006 01:20:58 -0000	1.8
***************
*** 13,16 ****
--- 13,17 ----
  // 2005-06-04   :   Lloyd Kinsella    : Modifications to support newer TDateTime implementation
  // 2006-03-21   :   Corwin Burgess  : Fixed index outofbounds in TMemIniFile.SetStrings
+ // 2006-03-26   :   Corwin Burgess  : Corrected transposed code in TMemIniFile.ReadSections
  
  namespace ShineOn.RTL;
***************
*** 284,288 ****
  procedure TMemIniFile.ReadSections(Strings: TStrings); 
  begin
!   FSections.Assign(Strings);
  end;
  
--- 285,290 ----
  procedure TMemIniFile.ReadSections(Strings: TStrings); 
  begin
!   //FSections.Assign(Strings);
!   Strings.Assign(FSections);
  end;
  



From nobody at sheep.berlios.de  Mon Mar 27 08:07:02 2006
From: nobody at sheep.berlios.de (msgclb)
Date: Mon, 27 Mar 2006 08:07:02 +0200
Subject: [Shineon-checkins] ShineOn/NUnit TestIniFiles.pas,1.4,1.5
Message-ID: <200603270607.k2R672t30307@bat.berlios.de>

Update of /cvsroot/shineon/ShineOn/NUnit
In directory sheep:/tmp/cvs-serv87/NUnit

Modified Files:
	TestIniFiles.pas 
Log Message:
 Added test for ValueExists, DeleteKey, ReadSectionValues, ReadSections and EraseSection.

Index: TestIniFiles.pas
===================================================================
RCS file: /cvsroot/shineon/ShineOn/NUnit/TestIniFiles.pas,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** TestIniFiles.pas	21 Mar 2006 16:24:27 -0000	1.4
--- TestIniFiles.pas	27 Mar 2006 06:07:25 -0000	1.5
***************
*** 23,26 ****
--- 23,31 ----
  // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.GetStrings.
  // 2006-03-21   :   Corwin Burgess  : Added TIniFilesTests.SetStrings.
+ // 2006-03-27   :   Corwin Burgess  : Added TIniFilesTests.ValueExists.
+ // 2006-03-27   :   Corwin Burgess  : Added TIniFilesTests.DeleteKey.
+ // 2006-03-27   :   Corwin Burgess  : Added TIniFilesTests.ReadSectionValues.
+ // 2006-03-27   :   Corwin Burgess  : Added TIniFilesTests.ReadSections.
+ // 2006-03-27   :   Corwin Burgess  : Added TIniFilesTests.EraseSection.
  
  // $Id$
***************
*** 53,57 ****
      [Test, Ignore('Test not implemented')] 
      method Rename;
!     [Test, Ignore('Test not implemented')] 
      method SectionExists;
      [Test] 
--- 58,62 ----
      [Test, Ignore('Test not implemented')] 
      method Rename;
!     [Test] 
      method SectionExists;
      [Test] 
***************
*** 89,103 ****
      [Test] 
      method ReadSection;
!     [Test, Ignore('Test not implemented')] 
      method ReadSections;
!     [Test, Ignore('Test not implemented')] 
      method ReadSectionValues;
!     [Test, Ignore('Test not implemented')] 
      method EraseSection;
!     [Test, Ignore('Test not implemented')] 
      method DeleteKey;
      [Test] 
      method UpdateFile;
!     [Test, Ignore('Test not implemented')] 
      method ValueExists;
    end;
--- 94,108 ----
      [Test] 
      method ReadSection;
!     [Test] 
      method ReadSections;
!     [Test] 
      method ReadSectionValues;
!     [Test] 
      method EraseSection;
!     [Test] 
      method DeleteKey;
      [Test] 
      method UpdateFile;
!     [Test] 
      method ValueExists;
    end;
***************
*** 165,169 ****
  method TIniFilesTests.SectionExists; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 170,177 ----
  method TIniFilesTests.SectionExists; 
  begin
!   if IniFile.SectionExists('Test') then
!     NUnit.Framework.Assert.IsTrue(true, 'Section Exists')
!   else
!     NUnit.Framework.Assert.IsTrue(false, 'Section Exists Failed');
  end;
  
***************
*** 343,362 ****
  method TIniFilesTests.ReadSections; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.ReadSectionValues; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.EraseSection; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
  method TIniFilesTests.DeleteKey; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 351,421 ----
  method TIniFilesTests.ReadSections; 
  begin
!   Var I: Integer;
!   Var T:TStringList;
!   Var S:String;
!   try
!     T := new TStringlist;
!     IniFile.ReadSections(T);
!     // if S Count equal 0 then somethings wrong! 
!     NUnit.Framework.Assert.AreNotEqual(0, T.Count);
!     if T.Count > 0 then
!     begin    
!       S := T[0];
!       NUnit.Framework.Assert.AreEqual('Test', S);
!     end
!     else
!       NUnit.Framework.Assert.AreEqual('Unkown', S);
!   finally
!     T.Free;
!   end;
  end;
  
  method TIniFilesTests.ReadSectionValues; 
  begin
!   Var I: Integer;
!   Var T:TStringList;
!   Var S:String;
!   try
!     T := new TStringlist;
!     IniFile.ReadSectionValues('Test', T);
!     // if S Count equal 0 then somethings wrong! 
!     NUnit.Framework.Assert.AreNotEqual(0, T.Count);
!     if T.Count > 0 then
!     begin    
!       S := T[0];
!       NUnit.Framework.Assert.AreEqual('String=TextData', S);
!     end
!     else
!       NUnit.Framework.Assert.AreEqual('Unknown=Value', S);
!   finally
!     T.Free;
!   end;
  end;
  
  method TIniFilesTests.EraseSection; 
  begin
!   var S:String;
!   IniFile.WriteString('NewTest','NewString','NewTextData');
!   IniFile.UpdateFile;
!   S := IniFile.ReadString('NewTest','NewString','');
!   NUnit.Framework.Assert.AreEqual('NewTextData', S);
!   IniFile.EraseSection('NewTest');
!   if IniFile.SectionExists('NewTest') then
!     NUnit.Framework.Assert.IsTrue(false, 'EraseSection Failed')
!   else
!     NUnit.Framework.Assert.IsTrue(true, 'EraseSection Worked');
! 
  end;
  
  method TIniFilesTests.DeleteKey; 
  begin
!   var S:String;
!   IniFile.WriteString('NewTest','NewString','NewTextData');
!   IniFile.UpdateFile;
!   S := IniFile.ReadString('NewTest','NewString','');
!   NUnit.Framework.Assert.AreEqual('NewTextData', S);
!   IniFile.DeleteKey('NewTest','NewString');
!   S := IniFile.ReadString('NewTest','NewString','');
!   NUnit.Framework.Assert.AreNotEqual('NewTextData', S);
  end;
  
***************
*** 372,376 ****
  method TIniFilesTests.ValueExists; 
  begin
!   NUnit.Framework.Assert.IsTrue(false, 'Not implemented');
  end;
  
--- 431,445 ----
  method TIniFilesTests.ValueExists; 
  begin
!   var S:String;
!   if IniFile.ValueExists('Test','String') then
!   begin  
!     S := IniFile.ReadString('Test','String','');
!     NUnit.Framework.Assert.AreEqual('TextData', S);
!   end
!   else
!   begin
!     S := IniFile.ReadString('Test','String','');
!     NUnit.Framework.Assert.AreNotEqual('TextData', S);
!   end;
  end;
  



